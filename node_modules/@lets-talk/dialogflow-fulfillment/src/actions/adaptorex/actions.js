const tdependence = require('./../../helpers/time_dependence');
const { AdaptorexService } = require("./../../services/adaptorex_service");
const df_service = require("./../../services/dialogflow");
const constants = require("./../../constants");
const loggerHelper = require("./../../helpers/logger");
const helpers = require("./../cpf/helpers");

const logger = loggerHelper.getLogger("FulfillmentAdaptorexActions");

async function transferTwilio2LT(paramsIn) {
  logger.info("Handling transferTwilio2LT with params", paramsIn);
  params = tdependence.evaluateTimeDependenceParams(paramsIn);
  const currentDate = new Date();
  const inOfficeHour = helpers.isInOfficeHour(currentDate, params);
  if ( ! inOfficeHour ) {
    logger.info("Not in office hour. Reject transfer!");
    if (!params.doNotSetNewTopicContext) {
      await df_service.setContext(params, constants.contextNewTopic);
    }
    await AdaptorexService.addMessages(params, params.messages.reject);
    return
  }
  await AdaptorexService.addSystemMessages(params, params.messages.accept);
  await AdaptorexService.addMember(params);
  await AdaptorexService.deleteMember(params);
};

async function closeConversationTwilio(params) {
  logger.info("Handling closeConversationTwilioAction with params", params);
  await AdaptorexService.addMessages(params, params.messages);
  await AdaptorexService.deleteChat(params);
};

exports.transferTwilio2LT = transferTwilio2LT;
exports.closeConversationTwilio = closeConversationTwilio;