const actionsCPF = require("./cpf/base");
const actionsAex = require("./adaptorex/actions");
const actionsSinacofi = require("./sinacofi/actions");
const actionsWAST = require("./wast/actions");
const http_helper = require("../services/helper");
const base_helper = require("./../helpers/base");
const constants = require("./../constants");
const { AdaptorexService } = require("../services/adaptorex_service");
const { CPFService } = require("../services/cpf_service");

const loggerHelper = require("./../helpers/logger");
const { evaluateCorona } = require("./corona/actions");

const logger = loggerHelper.getLogger("CommonActions");

async function transfer(params) {
  switch(params.provider) {
    case constants.providers.twilio:
      await actionsAex.transferTwilio2LT(params);
      break;
    default:
      await actionsCPF.transferConversation(params);
      break;
  }
}

async function close(params) {
  switch(params.provider) {
    case constants.providers.twilio:
      await actionsAex.closeConversationTwilio(params);
      break;
    default:
      await actionsCPF.closeConversation(params);
      break;
  }
}

async function addMessages(params, messages){
  switch(params.provider) {
    case constants.providers.twilio:
      await AdaptorexService.addMessages(params, messages);
      break;
    case constants.providers.lt:
      await CPFService.addMultipleMessages(params, messages);
      break;
    default:
      logger.error(constants.errorMessages.unknownProvider, { provider: params.provider });
      throw new Error(constants.errorMessages.unknownProvider);
  }
}

async function delegateRequest(request, params) {
  const url = base_helper.buildDelegationUrlFromRequest(request);
  const body = {...request.body, ...{hasDelegated: true}};
  const requestOptions = {
    url: url,
    payload: {
      body: body,
      method: "POST",
    },
  };
  await http_helper.sendRequest(requestOptions);
};

const availableActions = {
    "transfer": transfer,
    "close": close,
    "closeConversation": actionsCPF.closeConversation,
    "tagConversation": actionsCPF.tagConversation,
    "transferConversation": actionsCPF.transferConversation,
    "customIntegration": actionsCPF.executeCustomIntegration,
    "transferTwilio2LT": actionsAex.transferTwilio2LT,
    "closeConversationTwilio": actionsAex.closeConversationTwilio,
    "SinacofiCollectSerie": actionsSinacofi.collectSerie,
    "SinacofiCollect": actionsSinacofi.collectQuestions,
    "SinacofiHandleAnswer": actionsSinacofi.handleAnswer,
    "SinacofiReset": actionsSinacofi.reset,
    "evaluateWAST": actionsWAST.evaluateWAST,
    "resetWAST": actionsWAST.resetWAST,
    "evaluateCorona": evaluateCorona,
  };

exports.availableActions = availableActions;
exports.transfer = transfer;
exports.close = close;
exports.addMessages = addMessages;
exports.delegateRequest = delegateRequest;