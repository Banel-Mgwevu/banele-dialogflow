const { CPFService, callAPI } = require('../../services/cpf_service');
const constants = require('../../constants');
const helpers = require('./helpers');
const tdependence = require('../../helpers/time_dependence');
const loggerHelper = require("../../helpers/logger");
const df_service = require("./../../services/dialogflow");

const logger = loggerHelper.getLogger("FulfillmentActionHelper");


async function acceptTransferAction(params) {
  paramsUpdated = tdependence.evaluateTimeDependenceParams(params);

  try {
      await CPFService.addMultipleMessages(paramsUpdated, params.messages.accept);
      await helpers.addProjects(paramsUpdated);
      await helpers.addTags(paramsUpdated);
      await helpers.addMetadata(paramsUpdated);
  } catch (error) {
    logger.error("Error in preparation of transfer action:", error);
    await CPFService.addMultipleMessages(params, params.messages.error);
    return;
  }

  try {
    await CPFService.transfer(paramsUpdated);
  } catch (error) {
    logger.error("Error during transfer call to CPF:", error);
    await CPFService.addMultipleMessages(params, params.messages.error);
    return;
  }

  // Only if all steps are successful, set the context.
  await df_service.setContext(params, constants.contextBotHasTransfered);
}


async function rejectTransferAction(params) {
    if (params.tag_list_fh) {
      await CPFService.addTags(
        {...params, tag_list: params.tag_list_fh}
      );
    }
    if (!params.doNotSetNewTopicContext) {
      await df_service.setContext(params, constants.contextNewTopic);
    }
    await CPFService.addMultipleMessages(params, params.messages.reject);
}

exports.acceptTransferAction = acceptTransferAction;
exports.rejectTransferAction = rejectTransferAction;
