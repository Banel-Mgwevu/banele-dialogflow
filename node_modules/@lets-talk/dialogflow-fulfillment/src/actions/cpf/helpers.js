const { OpeningHours } = require('@stadtkatalog/openinghours');
const { CPFService } = require('../../services/cpf_service');
const { getNested } = require("../../helpers/base");

const availableMetadataFunctions = {
  'fct:utcDateInString': currentUtcDateInString
};

function groupIdFromUrl(url) {
  return parseInt(url.substring(url.length - 4));
}

function currentUtcDateInString() {
  const date = new Date(Date.now());
  return utcDateToString(date);
}

function utcDateToString(date) {
  const YYYY = date.getUTCFullYear();
  const MM = date.getUTCMonth()+1;
  const DD = date.getUTCDate();
  const hh = date.getUTCHours();
  const mm = date.getUTCMinutes();
  const ss = date.getUTCSeconds();
  return `${pad(YYYY,2)}-${pad(MM,2)}-${pad(DD,2)}T${pad(hh,2)}:${pad(mm,2)}:${pad(ss,2)}z`;
}

function pad(str, max) {
  str = str.toString();
  return str.length < max ? pad("0" + str, max) : str;
}

async function addMetadata(params) {
    if (params.metadata) {
      metadata = prepare_metadata(params.metadata);
      await CPFService.addMetadata(params, metadata);
    }
    await addDynamicMetadata(params);
}


async function addDynamicMetadata(params) {
  var dynamic_params = getNested(params, "display_details", "dynamic");
  if (!dynamic_params) { return }

  var metadata = {};
  for (const p of dynamic_params) {
      const val = getNested(params, "extra", p)
      if (val) {
        metadata[p] = val;
      }
  }
  if (Object.keys(metadata).length > 0) {
    await CPFService.addMetadata(params, metadata);
  }
}

async function addProjects(params) {
  if (params.project_list) {
    await CPFService.addProjects(params);
  }
}

async function addTags(params) {
  if (params.tag_list) {
    await CPFService.addTags(params);
  }
}

function prepare_metadata(metadataParams) {
  var metadata = {};
  Object.keys(metadataParams).forEach((key) => {
    const value = metadataParams[key];
    metadata[key] = maybeUpdateValue(value);
  });

  return metadata
}

function maybeUpdateValue(value) {
  if (value.substring(0, 4) == "fct:") {
    const fct = availableMetadataFunctions[value];
    return fct();
  }
  return value;
}

function isInOfficeHour(date, params) {
  const { availability } = params;
  const openingHoursHelper = new OpeningHours(availability.opening_times, availability.timezone, availability.holidays);

  const result = openingHoursHelper.isOpenAt(date);
  return result;
}

exports.utcDateToString = utcDateToString;
exports.currentUtcDateInString = currentUtcDateInString;
exports.groupIdFromUrl = groupIdFromUrl;
exports.addTags = addTags;
exports.addMetadata = addMetadata;
exports.addProjects = addProjects;
exports.isInOfficeHour = isInOfficeHour;
