const service_sinacofi = require("./../../services/sinacofi");
const dialogflow_service = require("./../../services/dialogflow");
const common_actions = require("./../common");
const helpers = require("./helpers");
const context_helpers = require("./../../helpers/contexts");
const utils = require("./utils");

const loggerHelper = require("./../../helpers/logger");

const logger = loggerHelper.getLogger("SINACOFIActions");


async function reset(params) {
    let msg;
    switch (params.challengeResult) {
        case 'fail':
            msg = params.msgFailure;
            break;
        case 'error':
            msg = params.msgError;
            break;
        default:
            msg = params.msgError;
            break;
    }
    try {
        await dialogflow_service.deleteAllContexts(params);
        await dialogflow_service.triggerEvent(params, params.eventStartValidation);
        await common_actions.addMessages(params, [msg, params.msgRestart]);
    } catch (error) {
        const errMsg = "Could not execute reset action";
        logger.error(errMsg, { error: error });
        throw new Error(errMsg);
    }
}

async function collectSerie(params) {
    await dialogflow_service.setContext(params, params.contextCollectSerie);
    await dialogflow_service.triggerEvent(params, params.eventCollectSerie);
    await common_actions.addMessages(params, [params.msgSerie]);
}


async function collectQuestions(params) {
    const response = await service_sinacofi.collectQuestions(params);
    const returnCode = helpers.extractReturnCode(response);
    switch(returnCode) {
        case "10000":
            await handleReceivedQuestions(params, response)
            break;

        default:
            params.challengeResult = 'error';
            await reset(params);
            break;
    }
};

async function handleReceivedQuestions(params, response) {
    const challengeId = helpers.extractChallengeId(response);
    const questions = helpers.extractQuestions(response);
    const question = helpers.prepareNthQuestion(questions, 1);
    try {
        await utils.setQuestionContexts(params, questions);
        await utils.setChallengeIdContext(params, challengeId);
        await dialogflow_service.setContext(params, params.contextCollectAnswer);
        await dialogflow_service.triggerEvent(params, params.eventCollectAnswer);
        await common_actions.addMessages(params, [question]);
    } catch (error) {
        logger.error("Could not handle received questions", { error: error } );
        params.challengeResult = 'error';
        await reset(params);
    }
}

async function handleAnswer(params) {
    try {
      const questions = context_helpers.getContextsIncludingString(params, "/question");
      const answers = context_helpers.getContextsIncludingString(params, "/answer");
      const n_questions = questions.length;
      const n_answers = answers.length + 1; // We received one new answer
      logger.info("Number of questions and answers", { nq: n_questions, na: n_answers });
      const allAnswersReceived = n_questions === n_answers;
      const newAnswer = await utils.setNewAnswerContext(params, n_answers);
      if (allAnswersReceived) {
          params.contexts.push(newAnswer);
          await checkIdentity(params);
      } else {
          const question = helpers.prepareNthQuestion(questions, n_answers + 1);
          await dialogflow_service.setContext(params, params.contextCollectAnswer);
          await dialogflow_service.triggerEvent(params, params.eventCollectAnswer);
          await common_actions.addMessages(params, [question]);
      }
    } catch (error) {
        logger.error("Could not correctly handle the received answer", { error: error } );
        params.challengeResult = 'error';
        await reset(params);
    }
};

async function checkIdentity(params) {
    const response = await service_sinacofi.checkAnswers(params);
    const returnCode = helpers.extractReturnCode(response);
    await dialogflow_service.deleteAllContexts(params);
    switch (returnCode) {
        case "10000":
            logger.info("Identity is confirmed.");
            const contexts = params["contexts"];
            const rut = service_sinacofi.getRut(contexts);
            const extended_params = {...params, ...{extra:{rut: rut, estado_autenticacion: "exitosa"}}}
            await common_actions.transfer(extended_params);
            break;
        case "10001":
        case "10002":
        case "10003":
        case "10004":
        case "10005":
        case "10006":
        case "10007":
        case "10008":
        case "10009":
        case "10010":
        case "10011":
            logger.info("Identity is NOT confirmed.");
            params.challengeResult = 'fail';
            await reset(params);
            break;
        default:
            logger.info("Identity is NOT confirmed, with error");
            params.challengeResult = 'error';
            await reset(params);
    }
}


exports.collectSerie = collectSerie;
exports.collectQuestions = collectQuestions;
exports.handleAnswer = handleAnswer;
exports.checkIdentity = checkIdentity;
exports.reset = reset;
