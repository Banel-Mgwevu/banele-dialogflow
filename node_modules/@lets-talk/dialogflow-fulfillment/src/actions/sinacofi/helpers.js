var xml2js = require('xml2js');
const constants = require("./../../constants");

const loggerHelper = require("./../../helpers/logger");
const logger = loggerHelper.getLogger("SINACOFIActionHelper");

function extractReturnCode(response) {
    const body = parseResponse(response);
    const returnCode = extractReturnCodeDeep(body);
    return returnCode
}

function extractQuestions(response) {
    const body = parseResponse(response);
    const questionsBody = extractQuestionsDeep(body);
    const questions = formatQuestionBody(questionsBody);
    logger.info("Received questions are", { questions: questions })
    return questions
};

function extractChallengeId(response) {
    const body = parseResponse(response);
    const idx = extractChallengeIdDeep(body);
    logger.info("Challenge id is", { challengeId: idx });
    return idx
};

function prepareNthQuestion(questions, n) {
    const question = questions.filter(elem => elem.name.includes(`question${n}`))[0];
    const params = question.parameters;
    let nAnswers = Object.keys(params).length / 2 - 1;
    if (constants.SinacofiSelectedAnswer in params) {
        nAnswers = ( Object.keys(params).length - 3 ) / 2;
    }
    logger.info("Parameters of questions are:", { params: params, nAnswers: nAnswers });
    let msg = `${params.question}\n`;
    for (let i = 1; i <= nAnswers; i++) {
        msg += `\n${i} - ${params[`answer${i}`]}`;
    }
    return msg;
}

function parseResponse(response) {
    let body;
    xml2js.parseString(response.body, function(err, res) {
        body = res;
    });
    return body;
}

function formatQuestionBody(body) {
    var questions = [];
    for (const elem of body) {
        var question = {}
        var i = questions.length + 1;
        var q = transformToQuestion(elem);
        question["name"] = `question${i}`;
        question["parameters"] = q;
        questions.push(question);
    }
    return questions
}

function transformToQuestion(body) {
    let question = {
        question: body["PREGUNTA"][0],
        codeQuestion: body["CODIGO_PREGUNTA"][0],
    };
    for (let i = 0; i < body["ALTERNATIVAS"].length; i++) {
        const answer = body["ALTERNATIVAS"][i]["RESPUESTA"][0];
        const code = body["ALTERNATIVAS"][i]["CODIGO_RESPUESTA"][0];
        question[`answer${i + 1}`] = answer;
        question[`codeAnswer${i + 1}`] = code;
    }
    return question
}

function extractChallengeIdDeep(body) {
    return body["soap:Envelope"]["soap:Body"][0]["ConsultaResponse"][0]["ConsultaResult"][0]["RESUMEN"][0]["IDCHALLENGE"][0]["_"];
}

function extractReturnCodeDeep(body) {
    return body["soap:Envelope"]["soap:Body"][0]["ConsultaResponse"][0]["ConsultaResult"][0]["codigoRetorno"][0];
}

function extractQuestionsDeep(body) {
    return body["soap:Envelope"]["soap:Body"][0]["ConsultaResponse"][0]["ConsultaResult"][0]["DETALLE"][0]["DESAFIO"][0]["PREGUNTAS"];
}

exports.extractQuestions = extractQuestions;
exports.extractReturnCode = extractReturnCode;
exports.extractChallengeId = extractChallengeId;
exports.prepareNthQuestion = prepareNthQuestion;
