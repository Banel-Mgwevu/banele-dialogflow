const actions = require('./actions/common');
const constants = require("./constants");
const debugError = require('debug')('dialogflow-fullfilments.handlers:error');
const loggerHelper = require("./helpers/logger");
const { requiredSettings } = require("./constants");
const { getNested } = require("./helpers/base");

const logger = loggerHelper.getLogger("FulfillmentHandler");

async function handleRequest(request, settings) {
  const shouldDelegate = ! request.body.hasDelegated;
  if (shouldDelegate) {
    logger.info("Delegating request", { request });
    await actions.delegateRequest(request);
    return constants.typing;
  } else {
    await handleAction(request, settings);
    return {"success": true};
  }
}

async function handleAction(request, settings) {
  logger.info("Handling action:", {
    request: request,
    settings: settings,
  });
  try {
    action = getActionFromRequest(request, settings);
    const params = collectParams(request, settings)
    await action(params);
    logger.info("Action handled successfully");
  } catch (error) {
    logger.error("Error while handling action:", error);
    debugError('HandlingActionError:', error);
  }
}


function getActionFromRequest(request, settings) {
  const actionString = request.body.queryResult.action;
  logger.info("Requested action is", {
    method: actionString,
  });
  keyAction = settings.actions[actionString]["method"];
  return actions.availableActions[keyAction];
}

function collectParams(request, settings) {
  const actionString = request.body.queryResult.action;
  const params = settings.actions[actionString]["params"];
  for (key of requiredSettings) {
    params[key] = settings[key];
  }
  params["session"] = getSession(request);
  params["sessionId"] = getSessionId(request);
  params["extra"] = getExtraParameters(request);
  params["conversation_id"] = getConversationId(request);
  params["from"] = getFrom(request);
  params["to"] = getTo(request);
  params["provider"] = getProvider(request);
  params["topic"] = getTopic(request);
  params["senderInfo"] = getSenderInfo(request);
  params["contexts"] = getContexts(request);
  logger.info("Collected parameters are:", params);
  return params
}

function getSession(request) {
  return getNested(request, "body", "session");
}

function getSessionId(request) {
  const session = getSession(request);
  return session.slice(-36);
}

function getExtraParameters(request) {
  return request.body.queryResult.parameters;
}

function getConversationId(request) {
  return getNested(request, "body", "originalDetectIntentRequest", "payload", "conversationId");
}

function getFrom(request) {
  return getNested(request, "body", "originalDetectIntentRequest", "payload", "metadata", "from");
}

function getTo(request) {
  return getNested(request, "body", "originalDetectIntentRequest", "payload", "metadata", "to");
}

function getProvider(request) {
  return getNested(request, "body", "originalDetectIntentRequest", "payload", "metadata", "provider");
}

function getTopic(request) {
  return getNested(request, "body", "originalDetectIntentRequest", "payload", "metadata", "topic");
}

function getContexts(request) {
  return getNested(request, "body", "queryResult", "outputContexts");
}

function getSenderInfo(request) {
  return getNested(request, "body", "originalDetectIntentRequest", "payload", "metadata", "sender_info");
}
 
exports.handleRequest = handleRequest;