const helper = require('../../services/helper');
const paymentCode = require('./paymentCode');
const loggerHelper = require("./../logger");

const logger = loggerHelper.getLogger("FulfillmentCustomIntegrations");


async function getIntegrationData(params) {
  const url = buildIntegrationUrl(params);
  const requestOptions = {
    url: url,
    payload: {
      method: 'POST',
      json: true,
    }
  };
  const response = await helper.callAPI(requestOptions);
  if (response === undefined) {
    throw new Error("No response received from integrator");
  }
  if (response.statusCode !== 200) {
    throw new Error("Unexpected status code returned by integrator", {
      status: response.statusCode,
    });
  }
  return response.body;
}


function buildIntegrationUrl(params) {
  const baseUrl = params.url
  var url = baseUrl + `?auth_token=${params.authToken}&organization=${params.integration.organization}&integration=${params.integration.name}`;
  if (params.integration.customParams === undefined) {
      return url;
  }
  for (cParam of params.integration.customParams) {
    var val = params.extra[cParam];
    if (val === undefined) {
      throw new Error("Expected parameter is missing in agent parameters:", cParam);
    }
    val = preProcess(val, cParam);
    const extraQueryParam = "&" + cParam + "=" + val;
    url += extraQueryParam;
  };
  return url;
}

function preProcess(val, paramName) {
  switch(paramName) {
    case "rut":
      return val.replace(/\./g, "").replace("k","K");
    default:
      return val;
  }
}

function applyIntegrationLogic(params, data) {
  switch(params.integration.name) {
    case("payment_code"):
      return paymentCode.applyLogic(params, data);
    default:
      logger.error("Error: No integration logic defined");
      return false;
  }
}


exports.getIntegrationData = getIntegrationData;
exports.applyIntegrationLogic = applyIntegrationLogic;
exports.buildIntegrationUrl = buildIntegrationUrl;