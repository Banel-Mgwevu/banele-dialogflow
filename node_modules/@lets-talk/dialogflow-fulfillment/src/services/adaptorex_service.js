"use strict";
const { callAPI, getEnv } = require("./helper");
const { getNested } = require("../helpers/base");


class AdaptorexService {

    async deleteMember(params) {
        const requestOptions = buildDeleteMemberPayload(params);
        await callAPI(requestOptions);
    }

    async deleteChat(params) {
        const requestOptions = buildDeleteChatPayload(params);
        await callAPI(requestOptions);
    }

    async addMember(params) {
        const requestOptions = buildAddMemberPayload(params);
        await callAPI(requestOptions);
    }

    async addMessages(params, messages) {
        for (const message of messages) {
            await this.addMessage(params, message);
        }
    }

    async addMessage(params, message) {
        const requestOptions = buildAddMessagePayload(params, message);
        await callAPI(requestOptions);
    }

    async addSystemMessages(params, messages) {
        for (const msg of messages) {
            await this.addSystemMessage(params, msg);
        }
    }

    async addSystemMessage(params, message) {
        const requestOptions = buildAddSystemMessagePayload(params, message);
        await callAPI(requestOptions);
    }
};

function buildDeleteMemberPayload(params) {
    const fullUrl = buildUrlMembers(params);
    return {
        url: fullUrl,
        payload: {
            method: 'DELETE',
            body: {
                provider: "dialogflow",
                reference: params.sessionId,
                topic: params.topic,
            },
            json: true
        }
    };
};

function buildDeleteChatPayload(params) {
    const fullUrl = buildUrlChats(params);
    return {
        url: fullUrl,
        payload: {
            method: 'DELETE',
            body: {
                topic: params.topic,
            },
            json: true
        }
    };
};

function buildAddMemberPayload(params) {
    const fullUrl = buildUrlMembers(params);
    const extra_data = buildExtraDataForAddMemberAction(params);
    return {
        url: fullUrl,
        payload: {
            method: 'POST',
            body: {
                topic: params.topic,
                provider: "letstalk",
                auth_payload: {
                    from: {
                        domain: "twilio",
                        sender: params.from, // client
                        recipient: params.to, // org
                        extra: params.senderInfo // info coming from provider
                    },
                    to: {
                        domain: "letstalk",
                        sender: params.to, // org
                        recipient: params.from // client
                    }
                },
                extra_data: extra_data,
            },
            json: true
        }
    };
};

function buildExtraDataForAddMemberAction(params) {
    var extraData = {
        inquiry_id: params.inquiry_id,
    }

    const metadata = buildMetadataForAddMemberAction(params);
    if (Object.keys(metadata).length > 0) {
        extraData["metadata"] = metadata
    }
    return extraData
}

function buildMetadataForAddMemberAction(params) {
    var metadata = getNested(params, "display_details", "fixed");
    if (!metadata) { metadata = {} }

    var dynamic_params = getNested(params, "display_details", "dynamic");
    if (!dynamic_params) { dynamic_params = [] }
    for (const p of dynamic_params) {
        metadata[p] = getNested(params, "extra", p);
    }
    return metadata
}

function buildAddSystemMessagePayload(params, message) {
    const fullUrl = buildUrlSystemMessages(params);
    return {
        url: fullUrl,
        payload: {
            method: 'POST',
            json: true,
            body: {
                content: message,
                topic: params.topic,
            },
        }
    }
}

function buildAddMessagePayload(params, message) {
    const fullUrl = buildUrlMessages(params);
    return {
        url: fullUrl,
        payload: {
            method: 'POST',
            body: {
                responseId: "",
                session: params.session,
                queryResult: {
                    queryText: "",
                    parameters: {},
                    allRequiredParamsPresent: true,
                    fulfillmentText: message,
                    fulfillmentMessages: [
                        {
                            text: {
                                text: [
                                    message,
                                ]
                            }
                        }
                    ],
                    outputContexts: [{}],
                    intent: {
                        name: "",
                        displayName: "",
                    },
                    intentDetectionConfidence: 1,
                    diagnosticInfo: {},
                    languageCode: "es",
                },
                originalDetectIntentRequest: {}
            },
            json: true,
        }
    }
}

function buildUrlMembers(params) {
    const env = getEnv(params);
    const token = params.adaptorex_token;
    return `https://adaptorex${env}letsta.lk/api/v1/members?token=${token}`
}

function buildUrlChats(params) {
    const env = getEnv(params);
    const token = params.adaptorex_token;
    return `https://adaptorex${env}letsta.lk/api/v1/chat?token=${token}`
}

function buildUrlMessages(params) {
    const env = getEnv(params);
    const token = params.adaptorex_token;
    return `https://adaptorex${env}letsta.lk/dialogflow?token=${token}`
}

function buildUrlSystemMessages(params) {
    const env = getEnv(params);
    const token = params.adaptorex_token;
    return `https://adaptorex${env}letsta.lk/system?token=${token}`
}

exports.AdaptorexService = new AdaptorexService();