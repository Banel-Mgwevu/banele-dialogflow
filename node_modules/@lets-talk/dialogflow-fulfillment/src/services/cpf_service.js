"use strict";
const { callAPI, getEnv } = require("./helper");
class CPFService {

  async addMultipleMessages(params, messages) {
    // Send one message after the other.
    // We DO NOT want messages.map(async msg => ...)
    // as we want them to be send in the correct order
    for (let msg of messages) {
      await this.addMessage(params, msg);
    }
  }

  async addMessage(params, messageText) {
    const requestOptions = buildAddMessagePayload(params, messageText);
    await callAPI(requestOptions);
  }

  async addMetadata(params, metadata) {
    const requestOptions = buildAddMetadataPayload(params, metadata);
    await callAPI(requestOptions);
  }

  async addProjects(params) {
    const requestOptions = buildAddProjectsPayload(params);
    await callAPI(requestOptions);
  }

  async addTags(params) {
    const requestOptions = buildAddTagsPayload(params);
    await callAPI(requestOptions);
  }

  async close(params) {
    const requestOptions = buildCloseConversationPayload(params);
    await callAPI(requestOptions);
  }

  async transfer(params) {
    const requestOptions = buildTransferConversationPayload(params);
    await callAPI(requestOptions);
  }
}


function buildAddMessagePayload(params, messageText) {
  const fullUrl = buildUrlAddMessage(params);
  return {
    url: fullUrl,
    payload: {
      method: 'POST',
      headers: {
        Authorization: `Basic ${params.token}`
      },
      body: {
        content_type: "text/plain",
        content: messageText,
        internal: false,
      },
      json: true
    }
  }
}



function buildAddMetadataPayload(params, metadata) {
  const fullUrl = buildUrlAddMetadata(params);
  return {
    url: fullUrl,
    payload: {
      method: 'POST',
      headers: {
        Authorization: `Basic ${params.token}`
      },
      body: metadata,
      json: true
    }
  }
}


function buildAddProjectsPayload(params) {
  const fullUrl = buildUrlAddTags(params);
  return {
    url: fullUrl,
    payload: {
      method: 'POST',
      headers: {
        Authorization: `Basic ${params.token}`
      },
      body: {
        conversation_id: params.conversation_id,
        project_list: params.project_list
      },
      json: true
    }
  };
}


function buildAddTagsPayload(params) {
  const fullUrl = buildUrlAddTags(params);
  return {
    url: fullUrl,
    payload: {
      method: 'POST',
      headers: {
        Authorization: `Basic ${params.token}`
      },
      body: {
        conversation_id: params.conversation_id,
        tag_list: params.tag_list
      },
      json: true
    }
  };
}


function buildCloseConversationPayload(params) {
  const fullUrl = buildUrlCloseConversation(params);
  return {
    url: fullUrl,
    payload: {
      method: 'PUT',
      headers: {
        Authorization: `Basic ${params.token}`
      },
      body: {
        status: 'Closed'
      },
      json: true
    }
  };
}


function buildTransferConversationPayload(params) {
  const fullUrl = buildUrlTransferConversation(params);
  return {
    url: fullUrl,
    payload: {
      method: 'POST',
      headers: {
        Authorization: `Basic ${params.token}`
      },
      body: {
        transfer: true,
        uniq: true
      },
      json: true
    }
  };
}


function buildUrlAddMessage(params) {
  const env = getEnv(params);
  const org = params.organization;
  const cid = params.conversation_id;
  return `https://${org}${env}letsta.lk/api/v1/conversations/${cid}/messages`;
}


function buildUrlAddMetadata(params) {
  const env = getEnv(params);
  const org = params.organization;
  const cid = params.conversation_id;
  return `https://${org}${env}letsta.lk/api/v1/conversations/${cid}/metadata`;
}


function buildUrlAddTags(params) {
  const env = getEnv(params);
  const org = params.organization;
  return `https://${org}${env}letsta.lk/api/v1/tags`;
}


function buildUrlTransferConversation(params) {
  const env = getEnv(params);
  const org = params.organization;
  const cid = params.conversation_id;
  const group_id = params.group_id;
  const baseUrl = `https://${org}${env}letsta.lk/api/v1/conversations/${cid}`;
  return baseUrl + `/conversation_groups?group_id=${group_id}`;
}


function buildUrlCloseConversation(params) {
  const env = getEnv(params);
  const org = params.organization;
  const cid = params.conversation_id;
  return `https://${org}${env}letsta.lk/api/v1/conversations/${cid}`;
}


exports.CPFService = new CPFService();
