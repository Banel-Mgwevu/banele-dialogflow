"use strict";
const got = require('got');
const loggerHelper = require("./../helpers/logger");
const https = require("https");

const logger = loggerHelper.getLogger("FulfillmentRequests");


async function callAPI(requestOptions) {
    logger.info("Calling API.", {
      options: requestOptions,
    });
    try {
      const response = await got(requestOptions.url, requestOptions.payload)
      logger.info("Successful call to API.", {
        status: response.status,
        body: response.body,
        options: requestOptions,
      });
      return response;
    } catch (error) {
      logger.error("Error when calling API.", {
        error: error,
        options: requestOptions,
      });
      throw new Error("Error when performing request.", requestOptions);
    }
  }

async function callDFAPI(client, request) {
  logger.info("request to Dialogflow API", { request: request });
  try {
    const res = await client.request(request);
    logger.info("Response from Dialogflow API", { response: res });
    return res
  } catch (error) {
    logger.error("Error when making request to DF API:", { error: error });
    throw new Error("Error when performing request to DF API.", { request: request });
  }
}

async function sendRequest(requestOptions) {
  // Following https://www.sensedeep.com/blog/posts/stories/lambda-fast-http.html
  const data = JSON.stringify(requestOptions.payload.body);
  const host = getHost(requestOptions.url);
  const path = getPath(requestOptions.url);
  const options = {
    hostname: host,
    path: path,
    method: requestOptions.payload.method,
    headers: {
      'Content-Type': 'application/json',
    }
  };
  logger.info("Sending request and letting go.", {
    options: options,
    payload: requestOptions.payload.body,
  });
  return new Promise((resolve, reject) => {
    let req = https.request(options);
    req.write(data);
    req.end(null, null, () => {
        resolve(req)
    });
  })
}

function getEnv(params) {
  return params.environment === 'production' ? '.' : '.staging.';
}

function getHost(url) {
  let elems = url.split("//");
  return elems[1].split("/")[0]
}

function getPath(url) {
    let elems = url.split("//");
    const pathMembers = elems[1].split("/").slice(1);
    return "/" + pathMembers.join("/");
}

exports.callAPI = callAPI;
exports.callDFAPI = callDFAPI;
exports.getEnv = getEnv;
exports.sendRequest = sendRequest;