const loggerHelper = require("./../helpers/logger");
const { callAPI } = require("./helper");
const context_helpers = require("../helpers/contexts");

const logger = loggerHelper.getLogger("SINACOFIService");

async function collectQuestions(params) {
    const body = getBodyCollectingQuestion(params);
    const headers = params.headers;
    const payload = {
        body: body,
        method: "POST",
        headers: headers,
    };
    const requestOptions = {
        url: params.sinacofi_url,
        payload: payload,
    }
    return await callAPI(requestOptions);
};

async function checkAnswers(params) {
    const body = getBodyCheckIdentity(params);
    const headers = params.headers;
    const payload = {
        body: body,
        method: "POST",
        headers: headers,
    };
    const requestOptions = {
        url: params.sinacofi_url,
        payload: payload,
    }
    return await callAPI(requestOptions);
};

function getBodyCollectingQuestion(params) {
    const contexts = params["contexts"];
    const rut = getRut(contexts);
    const serie = getSerie(contexts);
    logger.info('Found contexts are:', {
        contexts: contexts,
        rut: rut,
        serie: serie,
    });
    return `<?xml version="1.0" encoding="utf-8"?>
    <soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
      <soap:Body>
        <Consulta xmlns="http://sinacofi.cl/WebServices">
          <usuario>${params.sinacofi_user}</usuario>
          <claveUsuario>${params.sinacofi_password}</claveUsuario>
          <rutCliente>${rut}</rutCliente>
          <numeroSerie>${serie}</numeroSerie>
          <canalInstitucion>${params.sinacofi_canal}</canalInstitucion>
        </Consulta>
      </soap:Body>
    </soap:Envelope>`;
};

function getBodyCheckIdentity(params) {
    const contexts = params["contexts"];
    const rut = getRut(contexts);
    const challengeId = getChallengeId(contexts);
    const questions = context_helpers.getContextsIncludingString(params, "/question");
    const answers = context_helpers.getContextsIncludingString(params, "answer");
    const answerBody = buildAnswerBody(questions, answers);
    return `<?xml version="1.0" encoding="utf-8"?>
    <soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
      <soap:Body>
        <Consulta xmlns="http://sinacofi.cl/WebServices">
          <usuario>${params.sinacofi_user}</usuario>
          <claveUsuario>${params.sinacofi_password}</claveUsuario>
          <rutCliente>${rut}</rutCliente>
          <canalInstitucion>${params.sinacofi_canal}</canalInstitucion>
          <idChallenge>${challengeId}</idChallenge>
          <desafio>
            ${answerBody}
          </desafio>
        </Consulta>
      </soap:Body>
    </soap:Envelope>`;
};

function getRut(contexts) {
    for (const context of contexts) {
        const params = context["parameters"];
        if (params["rut.original"]) {
            return params["rut.original"].replace("-", "").replace(".", "").replace(".", "");
        }
    }
}

function getSerie(contexts) {
    for (const context of contexts) {
        const params = context["parameters"];
        if (params["serie.original"]) {
            return params["serie.original"].replace(".", "").replace(".", "");
        }
    }
}

function getChallengeId(contexts) {
    for (const context of contexts) {
        const params = context["parameters"];
        if (params["challengeId"]) {
            return params["challengeId"];
        }
    }
}

function buildAnswerBody(questions, answers) {
    let givenAnswers = [];
    const nQuestions = questions.length;
    for (let i = 1; i <= nQuestions; i++) {
        logger.info("Current loop", i);
        const question = questions.filter(elem => elem.name.includes(`question${i}`))[0];
        const answer = answers.filter(elem => elem.name.includes(`answer${i}`))[0];
        const codeQ = question.parameters["codeQuestion"];
        const codeA = answer.parameters[`codeAnswer`];
        const body = `<RESPUESTAS>
        <CODIGO_PREGUNTA xmlns="http://wsdl.sinacofi.cl/SDN122REQ">${codeQ}</CODIGO_PREGUNTA>
        <CODIGO_RESPUESTA xmlns="http://wsdl.sinacofi.cl/SDN122REQ">${codeA}</CODIGO_RESPUESTA>
      </RESPUESTAS>`;
        givenAnswers.push(body);
    }
    return givenAnswers.join("\n");
}

exports.collectQuestions = collectQuestions;
exports.checkAnswers = checkAnswers;
exports.getRut = getRut;
