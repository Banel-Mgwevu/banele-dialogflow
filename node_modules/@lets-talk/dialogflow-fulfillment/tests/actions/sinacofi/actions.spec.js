const actions = require("./../../../src/actions/sinacofi/actions");
const aex_actions = require("./../../../src/actions/adaptorex/actions");
const df_service = require("./../../../src/services/dialogflow");
const sinacofi_service = require("./../../../src/services/sinacofi");
const actions_cpf = require("./../../../src/actions/cpf/base");
const { AdaptorexService } = require("./../../../src/services/adaptorex_service");
const helpers = require("./../../../src/actions/sinacofi/helpers");
const context_helpers = require("./../../../src/helpers/contexts");
const utils = require("./../../../src/actions/sinacofi/utils");
const constants = require("./.././../../src/constants");
const mockedConstants = require("./constants");

const mDeleteAllContexts = jest.spyOn(df_service, "deleteAllContexts").mockImplementation();
const mSetContext = jest.spyOn(df_service, "setContext").mockImplementation();
const mTriggerEvent = jest.spyOn(df_service, "triggerEvent").mockImplementation();
const mPrepareQuestion = jest.spyOn(helpers, "prepareNthQuestion");
const mSetQuestionContext = jest.spyOn(utils, "setQuestionContexts").mockImplementation();
const mSetNewAnswerContext = jest.spyOn(utils, "setNewAnswerContext").mockImplementation();
const mSetIdContext = jest.spyOn(utils, "setChallengeIdContext").mockImplementation();
const mTransfer = jest.spyOn(aex_actions, "transferTwilio2LT").mockImplementation();
const mTransferLt2Lt = jest.spyOn(actions_cpf, "transferConversation").mockImplementation();
const mAddMessages = jest.fn();

AdaptorexService.addMessages = mAddMessages;

describe("reset action", () => {
    const params = {
        provider: constants.providers.twilio,
        msgFailure: "No podemos validar su identidad. Tenemos que empezar de nuevo",
        msgError: "Error en el proceso de validación",
        msgRestart: "Para validar su identidad, por favor indique su RUT",
        eventStartValidation: "start-validation",
    }

    beforeEach(() => {
        mAddMessages.mockClear();
        mTriggerEvent.mockClear();
        mDeleteAllContexts.mockClear();
    });

    it("deletes all contexts", async () => {
        expect.assertions(1);
        await actions.reset(params);
        expect(mDeleteAllContexts).toHaveBeenCalledWith(params);
    });

    it("triggers welcome event", async () => {
        expect.assertions(1);
        await actions.reset(params);
        expect(mTriggerEvent).toHaveBeenCalledWith(params, params.eventStartValidation);
    });

    it("adds failure and restart messages", async () => {
        expect.assertions(1);
        params.challengeResult = 'fail';
        await actions.reset(params);
        expect(mAddMessages).toHaveBeenCalledWith(params, [params.msgFailure, params.msgRestart]);
    });

    it("adds error and restart messages", async () => {
        expect.assertions(1);
        params.challengeResult = 'erroyyyr';
        await actions.reset(params);
        expect(mAddMessages).toHaveBeenCalledWith(params, [params.msgError, params.msgRestart]);
    });
});

describe("collect serie action", () => {
    const params = {
        provider: constants.providers.twilio,
        msgSerie: "Por favor indíqueme el número de documento de la cédula de identidad con puntos.",
        contextCollectSerie: {
            name: "context-collect-serie",
            lifespan: 10,
        },
        eventCollectSerie: "collect-serie",
    };

    beforeEach(() => {
        mAddMessages.mockClear();
        mTriggerEvent.mockClear();
        mSetContext.mockClear();
    });

    it("sets the correct context", async () => {
        expect.assertions(1);
        await actions.collectSerie(params);
        expect(mSetContext).toHaveBeenCalledWith(params, params.contextCollectSerie);
    });

    it("triggers collect serie event", async () => {
        expect.assertions(1);
        await actions.collectSerie(params);
        expect(mTriggerEvent).toHaveBeenCalledWith(params, params.eventCollectSerie);
    });

    it("adds correct messages", async () => {
        expect.assertions(1);
        await actions.collectSerie(params);
        expect(mAddMessages).toHaveBeenCalledWith(params, [params.msgSerie]);
    });
})


describe("collect questions action", () => {
    const params = {
        provider: constants.providers.twilio,
        contextCollectAnswer: {
            name: "sinacofi-collect-answer",
            lifespan: 10
        },
        eventCollectAnswer: "collect-answer",
    };
    beforeEach(() => {
        mPrepareQuestion.mockClear();
        mSetQuestionContext.mockClear();
        mSetIdContext.mockClear();
        mSetContext.mockClear();
        mAddMessages.mockClear();
        mTriggerEvent.mockClear();

        jest.spyOn(sinacofi_service, "collectQuestions").mockImplementation(() => mockedConstants.mockedResponse);
    });

    describe("return code is 10000", () => {
        it("prepares question", async () => {
            expect.assertions(1);
            await actions.collectQuestions(params);
            expect(mPrepareQuestion).toHaveBeenCalledWith(mockedConstants.expectedQuestions, 1);
        });

        it("sets the questions context", async () => {
            expect.assertions(1);
            await actions.collectQuestions(params);
            expect(mSetQuestionContext).toHaveBeenCalledWith(params, mockedConstants.expectedQuestions);
        });

        it("sets the challenge id context", async () => {
            expect.assertions(1);
            await actions.collectQuestions(params);
            expect(mSetIdContext).toHaveBeenCalledWith(params, "202012061400070966499828");
        });

        it("sets the collect answer context", async () => {
            expect.assertions(1);
            await actions.collectQuestions(params);
            expect(mSetContext).toHaveBeenCalledWith(params, params.contextCollectAnswer);
        });

        it("sends the question to adaptorex", async () => {
            const expectedQuestion = "¿A Qué Sucursal de la Región Metropolitana fue este mes de Mayo?\n\n1 - Sucursal CUPRUM Conchali, Santiago\n2 - Sucursal CUPRUM Est. central, Santiago\n3 - Sucursal CUPRUM Lo prado, Santiago\n4 - Sucursal CUPRUM La cisterna, Santiago";
            expect.assertions(1);
            await actions.collectQuestions(params);
            expect(mAddMessages).toHaveBeenCalledWith(params, [expectedQuestion]);
        });

        it("triggers the collect answer event", async () => {
            expect.assertions(1);
            await actions.collectQuestions(params);
            expect(mTriggerEvent).toHaveBeenCalledWith(params, params.eventCollectAnswer);
        });

    });

    describe("return code is not 10000", () => {
        const params = {
            provider: constants.providers.twilio,
            msgFailure: "No podemos validar su identidad. Tenemos que empezar de nuevo",
            msgRestart: "Para validar su identidad, por favor indique su RUT",
            eventStartValidation: "welcome",
        }

        beforeEach(() => {
            mAddMessages.mockClear();
            mTriggerEvent.mockClear();
            mDeleteAllContexts.mockClear();
        });

        it("deletes all contexts", async () => {
            expect.assertions(1);
            await actions.reset(params);
            expect(mDeleteAllContexts).toHaveBeenCalledWith(params);
        });

        it("triggers the welcome event", async () => {
            expect.assertions(1);
            await actions.reset(params);
            expect(mTriggerEvent).toHaveBeenCalledWith(params, params.eventStartValidation);
        });

        it("adds the error and restart messages", async () => {
            expect.assertions(1);
            await actions.reset(params);
            expect(mAddMessages).toHaveBeenCalledWith(params, [params.msgError, params.msgRestart]);
        });
    });
});

describe("handleAnswer", () => {
    const params = {
        provider: constants.providers.twilio,
        msgFailure: "Validación de identidad no exitosa",
        msgError: "Error en el proceso de validación",
        msgRestart: "Para validar su identidad, por favor indique su RUT",
        contextCollectAnswer: {
            name: "collect-answer",
            lifespan: 10,
        },
        eventCollectAnswer: "collect-answer",
        eventStartValidation: "start-validation",
        contexts: [
            {
                name: "rut",
                parameters: {
                    "rut.original": "11111111-1"
                }
            },
        ]
    };
    const mGetContexts = jest.spyOn(context_helpers, "getContextsIncludingString");

    beforeEach(() => {
        mTransfer.mockClear();
        mDeleteAllContexts.mockClear();
        mGetContexts.mockClear();
        mSetNewAnswerContext.mockClear();
        mSetContext.mockClear();
        mTriggerEvent.mockClear();
        mAddMessages.mockClear();
        mTransferLt2Lt.mockClear();
    })

    describe("not all answers received", () => {
        beforeEach(() => {
            mPrepareQuestion.mockImplementationOnce(() => "next question");
            mGetContexts
                .mockImplementationOnce(() => ["q1", "q2", "q3"])
                .mockImplementationOnce(() => ["a1"]);
        });

        it("saves the new answer in the context", async () => {
            expect.assertions(1);
            await actions.handleAnswer(params);
            expect(mSetNewAnswerContext).toHaveBeenCalledWith(params, 2);
        });

        it("sets the collect answer context", async () => {
            expect.assertions(1);
            await actions.handleAnswer(params);
            expect(mSetContext).toHaveBeenCalledWith(params, params.contextCollectAnswer);
        });

        it("triggers the collect answer event", async () => {
            expect.assertions(1);
            await actions.handleAnswer(params);
            expect(mTriggerEvent).toHaveBeenCalledWith(params, params.eventCollectAnswer);
        });

        it("sends the question to the chat", async () => {
            expect.assertions(1);
            await actions.handleAnswer(params);
            expect(mAddMessages).toHaveBeenCalledWith(params, ["next question"]);
        });
    });

    describe("all answers received", () => {
        beforeEach(() => {
            mTransfer.mockClear();
            mGetContexts.mockClear();
        });

        describe("identity can be confirmed (responseCode 10000)", () => {
            describe("provider is Twilio", () => {
                it("transfers the conversation to LT", async () => {
                    jest.spyOn(sinacofi_service, "checkAnswers").mockImplementation(() => {
                        return new Promise((res) => {
                            res(mockedConstants.mockedResponseIdentityCheckValid)
                        }
                    )});
                    expect.assertions(1);
                    await actions.checkIdentity(params);
                    const expected_params = {...params, ...{ extra: {rut: "111111111", estado_autenticacion: "exitosa"}}}
                    expect(mTransfer).toHaveBeenCalledWith(expected_params);
                });
            })

            describe("provider is lets-talk", () => {
                const params = {
                    provider: constants.providers.lt,
                    msgFailure: "Validación de identidad no exitosa",
                    msgRestart: "Para validar su identidad, por favor indique su RUT",
                    contexts: [
                        {
                            name: "rut",
                            parameters: {
                                "rut.original": "11111111-1"
                            }
                        }
                    ]
                };
                it("transfers the conversation correctly", async () => {
                    expect.assertions(1);
                    await actions.checkIdentity(params);
                    const expected_params = {...params, ...{ extra: {rut: "111111111", estado_autenticacion: "exitosa"}}}
                    expect(mTransferLt2Lt).toHaveBeenCalledWith(expected_params);
                });
            })
        });

        describe("identity cannot be confirmed (responseCode 10001)", () => {
            beforeEach(() => {
                jest.spyOn(sinacofi_service, "checkAnswers").mockImplementation(() => {
                    return new Promise((res) => {
                        res(mockedConstants.mockedResponseIdentityCheckInvalid)
                    }
                )});
            });

            it("does not transfer the conversation to LT", async () => {
                expect.assertions(1);
                await actions.checkIdentity(params);
                expect(mTransfer).not.toHaveBeenCalled();
            });

            it("deletes all contexts", async () => {
                expect.assertions(1);
                await actions.checkIdentity(params);
                expect(mDeleteAllContexts).toHaveBeenCalledWith(params);
            });

            it("triggers welcome event", async () => {
                expect.assertions(1);
                await actions.checkIdentity(params);
                expect(mTriggerEvent).toHaveBeenCalledWith(params, params.eventStartValidation);
            });

            it("adds Failure and restart messages", async () => {
                expect.assertions(1);
                await actions.checkIdentity(params);
                expect(mAddMessages).toHaveBeenCalledWith(params, [params.msgFailure, params.msgRestart]);
            });
        });
        describe("identity cannot be confirmed because of an error (responseCode 10018)", () => {
            beforeEach(() => {
                jest.spyOn(sinacofi_service, "checkAnswers").mockImplementation(() => {
                    return new Promise((res) => {
                        res(mockedConstants.mockedResponseIdentityCheckError)
                    }
                )});
            });

            it("does not transfer the conversation to LT", async () => {
                expect.assertions(1);
                await actions.checkIdentity(params);
                expect(mTransfer).not.toHaveBeenCalled();
            });

            it("deletes all contexts", async () => {
                expect.assertions(1);
                await actions.checkIdentity(params);
                expect(mDeleteAllContexts).toHaveBeenCalledWith(params);
            });

            it("triggers welcome event", async () => {
                expect.assertions(1);
                await actions.checkIdentity(params);
                expect(mTriggerEvent).toHaveBeenCalledWith(params, params.eventStartValidation);
            });

            it("adds error and restart messages", async () => {
                expect.assertions(1);
                await actions.checkIdentity(params);
                expect(mAddMessages).toHaveBeenCalledWith(params, [params.msgError, params.msgRestart]);
            });
        });
        describe("an error occurs", () => {
            beforeEach(() => {
                mPrepareQuestion.mockImplementationOnce(() => "next question");
                mGetContexts
                    .mockImplementationOnce(() => ["q1", "q2", "q3"])
                    .mockImplementationOnce(() => ["a1", "a2"]);
                jest.spyOn(sinacofi_service, "checkAnswers").mockImplementation(() => {
                    return Promise.reject("fail")
                    }
                )
            });

            it("deletes all contexts", async () => {
                expect.assertions(1);
                await actions.handleAnswer(params);
                expect(mDeleteAllContexts).toHaveBeenCalledWith(params);
            });

            it("triggers welcome event", async () => {
                expect.assertions(1);
                await actions.handleAnswer(params);
                expect(mTriggerEvent).toHaveBeenCalledWith(params, params.eventStartValidation);
            });

            it("adds error and restart messages", async () => {
                expect.assertions(1);
                await actions.handleAnswer(params);
                expect(mAddMessages).toHaveBeenCalledWith(params, [params.msgError, params.msgRestart]);
            });
        });
    });
})