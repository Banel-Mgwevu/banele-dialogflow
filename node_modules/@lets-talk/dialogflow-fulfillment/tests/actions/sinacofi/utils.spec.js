const df_service = require("./../../../src/services/dialogflow");

const utils = require("./../../../src/actions/sinacofi/utils");
const constants = require("./constants");

describe("setQuestionContexts", () => {
    const mockSetContext = jest.spyOn(df_service, "setContext").mockImplementation();

    beforeEach(() => {
        mockSetContext.mockClear();
    });

    const params = {
        df_client_email: "abc@gmail.com",
        df_private_key: "abcabc",
        project: "test-project",
        sessionId: "a1b2",
    };

    it("sets the correct number of contexts", async () => {
        expect.assertions(1);
        await utils.setQuestionContexts(params, constants.expectedQuestions);
        expect(mockSetContext).toHaveBeenCalledTimes(constants.expectedQuestions.length);
    });

    it("sets the first correct context", async () => {
        const expectedContext = {
            name: "question1",
            lifespan: 20,
            parameters: {
                question: "¿A Qué Sucursal de la Región Metropolitana fue este mes de Mayo?",
                codeQuestion: "1         ",
                answer1: "Sucursal CUPRUM Conchali, Santiago",
                codeAnswer1: "1         ",
                answer2: "Sucursal CUPRUM Est. central, Santiago",
                codeAnswer2: "2         ",
                answer3: "Sucursal CUPRUM Lo prado, Santiago",
                codeAnswer3: "3         ",
                answer4: "Sucursal CUPRUM La cisterna, Santiago",
                codeAnswer4: "4         ",
            },
        }
        expect.assertions(1);
        await utils.setQuestionContexts(params, constants.expectedQuestions);
        expect(mockSetContext).toHaveBeenNthCalledWith(1, params, expectedContext);
    });
});

describe("setChallengeIdContext", () => {
    const mockSetContext = jest.spyOn(df_service, "setContext").mockImplementation();

    beforeEach(() => {
        mockSetContext.mockClear();
    });

    const params = {
        df_client_email: "abc@gmail.com",
        df_private_key: "abcabc",
        project: "test-project",
        sessionId: "a1b2",
    };

    it("sets the correct number of contexts", async () => {
        expect.assertions(1);
        await utils.setChallengeIdContext(params, "123123");
        expect(mockSetContext).toHaveBeenCalledTimes(1);
    });

    it("sets the correct challenge Id context", async () => {
        const expectedContext = {
            name: "challengeId",
            lifespan: 20,
            parameters: {
                challengeId: "123123",
            },
        };
        expect.assertions(1);
        await utils.setChallengeIdContext(params, "123123");
        expect(mockSetContext).toHaveBeenNthCalledWith(1, params, expectedContext);
    })
});

describe("setNewAnswerContext", () => {
    const mockSetContext = jest.spyOn(df_service, "setContext").mockImplementation();

    beforeEach(() => {
        mockSetContext.mockClear();
    });

    const params = {
        df_client_email: "abc@gmail.com",
        df_private_key: "abcabc",
        project: "test-project",
        sessionId: "a1b2",
        extra: {
            selected_answer: 3,
        },
        contexts: [
            {
                name: "/question1",
                parameters: {
                    codeQuestion: "Q1",
                    codeAnswer1: "RES1",
                    codeAnswer2: "RES2",
                    codeAnswer3: "RES3",
                    codeAnswer4: "RES4",
                }
            }
        ]
    };

    it("sets the correct number of contexts", async () => {
        expect.assertions(1);
        await utils.setNewAnswerContext(params, 1);
        expect(mockSetContext).toHaveBeenCalledTimes(1);
    });

    it("sets the correct answer context", async () => {
        const expectedContext = {
            name: "answer1",
            lifespan: 20,
            parameters: {
                codeQuestion: "Q1",
                codeAnswer: "RES3",
            },
        };
        expect.assertions(1);
        await utils.setNewAnswerContext(params, 1);
        expect(mockSetContext).toHaveBeenNthCalledWith(1, params, expectedContext);
    })
});