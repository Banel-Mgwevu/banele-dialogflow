const actions = require("./../../../src/actions/wast/actions");

const { AdaptorexService } = require("./../../../src/services/adaptorex_service");
const df_service = require("./../../../src/services/dialogflow");

const mDeleteAllContexts = jest.spyOn(df_service, "deleteAllContexts").mockImplementation();
const mAddMessage = jest.fn();

AdaptorexService.addMessage = mAddMessage;


describe("evaluate wast action", () => {
    beforeEach(() => {
        mAddMessage.mockClear();
        mDeleteAllContexts.mockClear();
    })
    describe("success case", () => {
        describe("detected inter-family violence", () => {
            const params = {
                extra: {
                    r1: "2",
                    r2: "2",
                    r3: "2",
                    r4: "2",
                    r5: "2",
                    r6: "2",
                    r7: "2",
                    r8: "1",
                },
                messageWASTPositive: "detection"
            }
            it("sends detection message to adaptorex", async () => {
                expect.assertions(1);
                await actions.evaluateWAST(params);
                expect(mAddMessage).toHaveBeenCalledWith(params, "detection");
            });

            it("reset the contesxts", async () => {
                expect.assertions(1);
                await actions.evaluateWAST(params);
                expect(mDeleteAllContexts).toHaveBeenCalledWith(params);
            });
        });
        describe("did not detected inter-family violence", () => {
            const params = {
                extra: {
                    r1: "2",
                    r2: "2",
                    r3: "2",
                    r4: "2",
                    r5: "2",
                    r6: "2",
                    r7: "1",
                    r8: "1",
                },
                messageWASTNegative: "no detection"
            }
            it("sends non-detection message to adaptorex", async () => {
                expect.assertions(1);
                await actions.evaluateWAST(params);
                expect(mAddMessage).toHaveBeenCalledWith(params, "no detection");
            });

            it("reset the contesxts", async () => {
                expect.assertions(1);
                await actions.evaluateWAST(params);
                expect(mDeleteAllContexts).toHaveBeenCalledWith(params);
            });
        });
    });
    describe("missing answers", () => {
        const params = {
            extra: {
                r1: 2,
                r2: 2,
            },
            messageWASTError: "sth went wrong"
        }
        it("sends error message to adaptorex", async () => {
            expect.assertions(1);
            await actions.evaluateWAST(params);
            expect(mAddMessage).toHaveBeenCalledWith(params, "sth went wrong");
        });

        it("reset the contesxts", async () => {
            expect.assertions(1);
            await actions.evaluateWAST(params);
            expect(mDeleteAllContexts).toHaveBeenCalledWith(params);
        });
    });
})


describe("reset wast action", () => {
    const params = {
        messageWASTReset: "reset"
    }
    it("sends error message to adaptorex", async () => {
        expect.assertions(1);
        await actions.resetWAST(params);
        expect(mAddMessage).toHaveBeenCalledWith(params, "reset");
    });

    it("reset the contesxts", async () => {
        expect.assertions(1);
        await actions.resetWAST(params);
        expect(mDeleteAllContexts).toHaveBeenCalledWith(params);
    });
});