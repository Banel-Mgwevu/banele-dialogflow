const actions = require('../src/actions/common');
const handlers = require('../src/handlers');
const constants = require('../src/constants');

const availableActions = actions.availableActions;
availableActions["closeConversation"] = jest.fn();

describe('handleRequest', () => {

    const closeConversation = availableActions["closeConversation"];
    const agent = jest.fn();
    const settings = {
      organization: "normaliza",
      project: "normaliza-abcdef",
      token: "abc123==",
      environment: "production",
      availability: {
        opening_times: {
          mon: [
            "09:00",
            "17:50"
          ],
          tue: [
            "09:00",
            "17:50"
          ],
          wed: [
            "09:00",
            "17:50"
          ],
          thu: [
            "09:00",
            "17:50"
          ],
          fri: [
            "09:00",
            "17:50"
          ],
        },
        timezone: "America/Santiago",
      },
      actions: {
        action1: {
            method: "closeConversation",
            params: {
                key1: "val1",
            },
        },
        action2: {
          method: "closeConversation",
          params: {
              key1: "val2",
          },
      },
      },
    };
    const request = {
      body: {
        hasDelegated: true,
        queryResult: {
          queryText: "11111111-1",
          action: "action1",
          parameters: {
            rut: "11111111-1"
          },
          allRequiredParamsPresent: true,
          outputContexts: [
            {
              name: "projects/normaliza-unsvtc/agent/sessions/2b045723-fe5e-6e19-f71f-2e452a29582d/contexts/__system_counters__",
              parameters: {
                rut: "11111111-1",
              }
            }
          ],
          intent: {
            name: "projects/test-1234/agent/intents/59d4a488-513b-4cdd-b4a4-adefa395880f",
            displayName: "DESPEDIDA"
          },
          intentDetectionConfidence: 1,
          languageCode: "es"
        },
        originalDetectIntentRequest: {
          source: "DIALOGFLOW_CONSOLE",
          payload: {
            conversationId: 25,
          }
        },
        session: "projects/test-1234/agent/sessions/2b045723-fe5e-6e19-f71f-2e452a29582d"
      }
    };

    beforeEach(() => {
        closeConversation.mockImplementationOnce();
        closeConversation.mockClear();
    })

    it('calls the correct action', async () => {
        expect.assertions(1);
        await handlers.handleRequest(request, settings);
        expect(closeConversation).toBeCalledTimes(1);
    });

    it('calls the action with the conversationId in the params', async () => {
        expect.assertions(1);
        await handlers.handleRequest(request, settings);
        expect(closeConversation.mock.calls[0][0].conversation_id).toEqual(25);
    });

    it('calls action with expected parameters', async () => {
        const expectedParams = {
          organization: "normaliza",
          project: "normaliza-abcdef",
          token: "abc123==",
          environment: "production",
          availability: {
            opening_times: {
              mon: [
                "09:00",
                "17:50"
              ],
              tue: [
                "09:00",
                "17:50"
              ],
              wed: [
                "09:00",
                "17:50"
              ],
              thu: [
                "09:00",
                "17:50"
              ],
              fri: [
                "09:00",
                "17:50"
              ],
            },
            timezone: "America/Santiago",
          },
          key1: "val1",
          conversation_id: 25,
          extra: {
            rut: "11111111-1",
          },
          contexts: [
            {
              "name": "projects/normaliza-unsvtc/agent/sessions/2b045723-fe5e-6e19-f71f-2e452a29582d/contexts/__system_counters__",
              "parameters": {
                "rut": "11111111-1",
              },
            },
          ],
          from: undefined,
          to: undefined,
          provider: undefined,
          topic: undefined,
          df_client_email: undefined,
          df_private_key: undefined,
          sessionId: "2b045723-fe5e-6e19-f71f-2e452a29582d",
          session: "projects/test-1234/agent/sessions/2b045723-fe5e-6e19-f71f-2e452a29582d",
        };
        expect.assertions(1);
        await handlers.handleRequest(request, settings);
        expect(closeConversation).toHaveBeenCalledWith(expectedParams);
    });
});


describe("delegation Logic", () => {
  const mDelegate = jest.spyOn(actions, "delegateRequest").mockImplementation();

  describe("request is being delegated", () => {
    const params = {
      actions: {
        action1: {
          method: "transfer",
          params: {},
        }
      }
    };
    const request = {
      body: {
        queryResult: {
          action: "action1",
        },
        session: "abc/def/123-123-123",
      }
    };

    beforeEach(() => {
      mDelegate.mockClear();
    })

    it("returns the typing action", async () => {
      expect.assertions(1);
      const response = await handlers.handleRequest(request, params);
      expect(response).toEqual(constants.typing);
    });

    it("delegates the request", async () => {
      expect.assertions(1);
      const response = await handlers.handleRequest(request, params);
      expect(mDelegate).toHaveBeenCalled();
    });
  });

  describe("request is not being delegated", () => {
    const params = {
      actions: {
        action1: {
          method: "transfer",
          params: {},
        }
      }
    };
    const request = {
      body: {
        hasDelegated: true,
        queryResult: {
          action: "action1",
        },
        session: "abc/def/123-123-123",
      }
    };

    it("return success true", async () => {
      expect.assertions(1);
      const response = await handlers.handleRequest(request, params);
      expect(response).toEqual({success: true});
    })
  });
})