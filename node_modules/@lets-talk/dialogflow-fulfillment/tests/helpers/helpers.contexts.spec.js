const helpers = require("./../../src/helpers/contexts");

describe("getContextsIncludingString", () => {
    const params = {
        contexts: [
            {
                name: "abc/123/question1",
                parameters: {
                    question: "???",
                    codeQuestion: "Q1",
                    answer1: "!!!",
                    codeAnswer1: "R11"
                }
            },
            {
                name: "abc/123/question2",
                parameters: {
                    question: "???",
                    codeQuestion: "Q2",
                    answer1: "!!!",
                    codeAnswer1: "R21"
                }
            },
        ]
    };

    it("selects all matching contexts", () => {
        const res = helpers.getContextsIncludingString(params, "question");
        expect(res.length).toEqual(2);
    });

    it("returns none if no matches", () => {
        const res = helpers.getContextsIncludingString(params, "other");
        expect(res.length).toEqual(0);
    });

    it("returns all contexts", () => {
        const res = helpers.getContextsIncludingString(params, "question");
        expect(res).toEqual(params.contexts);
    });

    it("selects all matching contexts", () => {
        const res = helpers.getContextsIncludingString(params, "question1");
        expect(res.length).toEqual(1);
    });

});


describe("doesContextExist", () => {
    const params = {
        contexts: [{
            name: "context1"
        }]
    }

    it("returns true if context exists", () => {
        expect(helpers.doesContextExist(params, "context1")).toBeTruthy();
    })

    it("returns false if context does not exists", () => {
        expect(helpers.doesContextExist(params, "context2")).toBeFalsy();
    })
})