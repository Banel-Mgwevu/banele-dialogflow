const { getLogger } = require("../../src/helpers/logger");
const { serviceName } = require("../../src/constants");

const mockWinstonCreateLogger = jest.fn();
const mockWinstonFormatJson = jest.fn(() => ({}));
const mockWinstonTransportConsole = jest.fn(() => ({}));
jest.mock("winston", () => {
  return {
    createLogger: jest.fn((...args) => mockWinstonCreateLogger(...args)),
    format: { json: jest.fn(() => mockWinstonFormatJson()) },
    transports: {
      Console: jest.fn(() => mockWinstonTransportConsole()),
    },
  };
});

describe("helpers/logger", () => {
  const OLD_ENV = process.env;

  beforeAll(() => {
    process.env = {
      ...OLD_ENV,
      AWS_LAMBDA_FUNCTION_NAME: "myFunctionName",
    };
  });

  afterAll(() => {
    process.env = OLD_ENV;
  });
  describe("getLogger", () => {
    beforeEach(() => {
      mockWinstonCreateLogger.mockClear();
      mockWinstonFormatJson.mockClear();
      mockWinstonTransportConsole.mockClear();
    });
    it("Should call createLogger", () => {
      getLogger("myLambda");
      expect(mockWinstonCreateLogger).toHaveBeenCalledWith({
        level: "off",
        exitOnError: false,
        format: {},
        defaultMeta: {
          package: "myLambda",
          environment: "test",
          service: serviceName,
          functionName: "myFunctionName",
        },
        transports: expect.any(Array),
      });
    });

    it("Should configure transports.Console", () => {
      getLogger("myLambda");
      expect(mockWinstonTransportConsole).toHaveBeenCalled();
    });

    it("Should configure format.json", () => {
      getLogger("myLambda");
      expect(mockWinstonFormatJson).toHaveBeenCalled();
    });
  });
});
