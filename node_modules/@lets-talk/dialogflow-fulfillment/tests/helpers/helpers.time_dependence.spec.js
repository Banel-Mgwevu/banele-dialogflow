const {
  advanceTo,
  clear
} = require('jest-date-mock');
const helper = require('../../src/helpers/time_dependence');


describe('evaluateTimeDependenceParams', () => {
  describe('when there is no time dependence', () => {
    beforeEach(() => {
      advanceTo(new Date('June 26, 2020 16:00:00-04:00')); // Friday, 4pm
    });

    afterEach(() => {
      clear();
    });

    const params = {
      "group_id": 17
    };

    it('leaves the group id untouched', () => {
      paramsNew = helper.evaluateTimeDependenceParams(params);
      setGroupId = paramsNew.group_id;
      expect(setGroupId).toEqual(17);
    })
  })
})

describe('when there is time dependence', () => {
  describe('when group id is time dependent', () => {
    const params = {
      "group_id": {
        "time_dependence": {
          "default": 25,
          "deviating_value": 42,
          "deviating_times": {
            "fri": [
              "15:00",
              "17:50"
            ]
          },
          "timezone": "America/Santiago"
        }
      }
    }
    describe('when in special times', () => {
      beforeEach(() => {
        advanceTo(new Date('June 26, 2020 16:00:00-04:00')); // Friday, 4pm
      });

      afterEach(() => {
        clear();
      });

      it('sets the correct group id', () => {
        paramsNew = helper.evaluateTimeDependenceParams(params);
        setGroupId = paramsNew.group_id;
        expect(setGroupId).toEqual(42)
      })
    })

    describe('when in normal times', () => {
      beforeEach(() => {
        advanceTo(new Date('June 25, 2020 16:00:00-04:00')); // Thursday
      });

      afterEach(() => {
        clear();
      });

      it('sets the correct group id', () => {
        paramsNew = helper.evaluateTimeDependenceParams(params);
        setGroupId = paramsNew.group_id;
        expect(setGroupId).toEqual(25)
      })
    })
  })
})
