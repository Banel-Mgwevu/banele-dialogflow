const helper = require("../../../src/services/helper");
const base = require("../../../src/helpers/integrations/base");
const paymentCode = require("../../../src/helpers/integrations/paymentCode");

const mockedAPICall = jest.spyOn(helper, "callAPI");

describe("base.getIntegrationData", () => {
  const params = {
      authToken: "abc123",
      url: "http://base.com",
      integration: {
        name: "payment_code",
        organization: "org1",
        customParams: ["rut"],
      },
      extra: {
        rut: "11.111.111-k",
        other: "ababab",
      }
  };
  beforeEach(() => {
      mockedAPICall.mockClear();
  });

  describe("success case", () => {
    const body = {key: "some-val"}
    const response = {
      body: body,
      statusCode: 200,
    }
    beforeEach(() => {
      mockedAPICall.mockImplementation(() => {
        return new Promise((res) => {res(response)});
      });
    });

    it("makes one request", async () => {
        expect.assertions(1);
        await base.getIntegrationData(params);
        expect(mockedAPICall).toHaveBeenCalledTimes(1);
      });

      it("makes correct request", async () => {
        const expectedUrl = "http://base.com?auth_token=abc123&organization=org1&integration=payment_code&rut=11111111-K";
        const expectedOptions = {
            url: expectedUrl,
            payload: {
              method: 'POST',
              json: true,
            }
        }
        expect.assertions(1);
        await base.getIntegrationData(params);
        expect(mockedAPICall).toHaveBeenCalledWith(expectedOptions);
      });

  it("returns the body", async () => {
      expect.assertions(1);
      const result = await base.getIntegrationData(params);
      expect(result).toEqual(body);
    });
  });

  describe("failure case", () => {
    describe("No response received from request", () => {
      const response = undefined;
      beforeEach(() => {
          mockedAPICall.mockImplementationOnce(() => {
              return new Promise((res) => {res(response)});
          });
      });

      it("throws an error", async () => {
          await expect(base.getIntegrationData(params))
          .rejects
          .toThrow("No response received from integrator")
      });
    });

    describe("Response has unexpected status code", () => {
      const response = {
        body: JSON.stringify({key: "some-val"}),
        statusCode: 203,
      }
      beforeEach(() => {
        mockedAPICall.mockImplementationOnce(() => {
          return new Promise((res) => {res(response)});
        });
      });

      it("throws an error", async () => {
        await expect(base.getIntegrationData(params))
        .rejects
        .toThrow("Unexpected status code returned by integrator", 203)
      });
    });
  });
});


describe("buildIntegrationUrl", () => {
  const params = {
      authToken: "abc123",
      url: "http://base.com",
      integration: {
        name: "payment_code",
        organization: "org1",
    },
    extra: {
      rut: "11.111.111-k",
      other: "ababab",
    }
  };

  describe("when no custom params are present", () => {
    beforeEach(() => {
        params.integration.customParams = undefined;
    });

    it("returns expected url", () => {
        const expectedUrl = "http://base.com?auth_token=abc123&organization=org1&integration=payment_code";
        const result = base.buildIntegrationUrl(params);
        expect(result).toEqual(expectedUrl);
    });
  });

  describe("when custom params are present", () => {
    describe("when rut is present", () => {
      beforeEach(() => {
          params.integration.customParams = ["rut"];
      });
      it("returns expected url", () => {
          const expectedUrl = "http://base.com?auth_token=abc123&organization=org1&integration=payment_code&rut=11111111-K";
          const result = base.buildIntegrationUrl(params);
          expect(result).toEqual(expectedUrl);
      });
    });

    describe("when multiple params are present", () => {
      beforeEach(() => {
          params.integration.customParams = ["rut", "other"];
      });
      it("returns expected url", () => {
          const expectedUrl = "http://base.com?auth_token=abc123&organization=org1&integration=payment_code&rut=11111111-K&other=ababab";
          const result = base.buildIntegrationUrl(params);
          expect(result).toEqual(expectedUrl);
      });
    });

    describe("when custom param is missing in agent params", () => {
      beforeEach(() => {
          params.integration.customParams = ["missing"];
      });
      it("returns expected url", () => {
          expect(() => {
              base.buildIntegrationUrl(params)}).toThrow("Expected parameter is missing in agent parameters:", "missing");
      });
    });
  });
});

describe("applyIntegrationLogic", () => {
    describe("when payment_code", () => {
        const params = {
            authToken: "abc123",
            url: "http://base.com",
            integration: {
              name: "payment_code",
              organization: "org1",
          },
          extra: {
            rut: "11.111.111-k",
            other: "ababab",
          }
        };
        const data = {key: "val"};
        mPaymenCodeLogic = jest.spyOn(paymentCode, "applyLogic")
            .mockImplementation(() => {return "ok"});

        beforeEach(() => {
            mPaymenCodeLogic.mockClear();
        })
        it("applies payment code logic", () => {
            base.applyIntegrationLogic(params, data);
            expect(mPaymenCodeLogic).toHaveBeenCalledWith(params, data);
        });

        it("returns result of payment logic", () => {
            const result = base.applyIntegrationLogic(params, data);
            expect(result).toEqual("ok");
        });
    });

    describe("when unknown logic", () => {
        const params = {
            integration: {
                name: "unknown",
            }
        };
        const data = {key: "val"};

        it("returns false", () => {
            const result = base.applyIntegrationLogic(params, data);
            expect(result).toBeFalsy();
        });
    });
});