const { advanceTo, clear } = require('jest-date-mock');
const handlers = require('../../../../src/handlers');
const helpers = require('../../../../src/actions/cpf/helpers');
const settings = require('../../../mocks/configurations/org1.json');
const df_service = require("./../../../../src/services/dialogflow");

const mockGot = jest.fn();
jest.mock('got', () => jest.fn((...args) => mockGot(...args)));

const mSetContext = jest.spyOn(df_service, "setContext").mockImplementation();
const mockDoesContextExist = jest.spyOn(df_service, "doesContextExist").mockImplementation();

jest.useFakeTimers();

describe('Bot-org1', () => {

  beforeEach(() => {
    clear();
    mockGot.mockClear();

    mockGot.mockImplementation(
      () => new Promise((resolve) => resolve({ body: "ok" })));
    clear();
  })

  describe('actions', () => {
    describe('input.transfer.laboratorio', () => {

      const request = {
        body: {
          hasDelegated: true,
          originalDetectIntentRequest: {
            payload: {
              conversationId: 25
            }
          },
          queryResult: {
            action: "input.transfer.laboratorio",
            parameters: {},
            outputContexts: [],
          },
          session: "projects/test-1234/agent/sessions/2b045723-fe5e-6e19-f71f-2e452a29582d",
          provider: "letstalk_agent",
        }
      }

      describe('When Wednesdays after 15:00', () => {
        beforeEach(() => {
          advanceTo(new Date('June 17, 2020 15:01:00-04:00'));
        });
        it('sends the correct message', async () => {
          expect.assertions(1);
          await handlers.handleRequest(request, settings);
          jest.runAllTimers();
          const sentMessage = mockGot.mock.calls[0][1].body.content;
          const expectedMessageText = "Tu conversación está siendo derivada con uno de nuestros ejecutivos.";
          expect(sentMessage).toEqual(expectedMessageText);
        })

        it('adds the correct project tag', async () => {
          expect.assertions(1);
          await handlers.handleRequest(request, settings);
          jest.runAllTimers();
          const addedProjects = mockGot.mock.calls[1][1].body.project_list;
          expect(addedProjects).toEqual(['Laboratorio-sitio-publico']);
        });

        it('Transfers to the group laboratorio', async () => {
          expect.assertions(1);
          debugger;
          await handlers.handleRequest(request, settings);
          jest.runAllTimers();
          const calledUrl = mockGot.mock.calls[2][0];
          const usedGroup = helpers.groupIdFromUrl(calledUrl);
          expect(usedGroup).toEqual(2766);
        });
      });

      describe('When Fridays before 15:00', () => {
        beforeEach(() => {
          advanceTo(new Date('June 19, 2020 14:59:00-04:00'));
        });

        it('It transfers to group "laboratorio"', async () => {
          expect.assertions(1);
          await handlers.handleRequest(request, settings);
          jest.runAllTimers();
          const calledUrl = mockGot.mock.calls[2][0];
          const usedGroup = helpers.groupIdFromUrl(calledUrl);
          expect(usedGroup).toEqual(2766);
        });
      });

      describe('When Fridays after 15:00', () => {
        beforeEach(() => {
          advanceTo(new Date('June 19, 2020 16:01:00-04:00'));
        });

        it('transfers to group "inbound"', async () => {
          expect.assertions(1);
          await handlers.handleRequest(request, settings);
          jest.runAllTimers();
          const calledUrl = mockGot.mock.calls[2][0];
          const usedGroup = helpers.groupIdFromUrl(calledUrl);
          expect(usedGroup).toEqual(2455);
        });

        it('adds the correct project tag', async () => {
            expect.assertions(1);
            await handlers.handleRequest(request, settings);
            jest.runAllTimers();
            const addedProjects = mockGot.mock.calls[1][1].body.project_list;
            expect(addedProjects).toEqual(['Laboratorio-sitio-publico']);
        });
      });

      describe('When Fridays after 17:50', () => {
        beforeEach(() => {
          advanceTo(new Date('June 19, 2020 17:51:00-04:00'));
        });
        it('It does not transfer - it only adds two messages', async () => {
          expect.assertions(2);
          await handlers.handleRequest(request, settings);
          jest.runAllTimers();
          for (const call of mockGot.mock.calls) {
            const url = call[0];
            expect(url).toEqual("https://org1.letsta.lk/api/v1/conversations/25/messages");
          }
        });
      });

      describe('input.transfer.inbound', () => {
        beforeEach(() => {
          advanceTo(new Date('June 17, 2020 15:01:00-04:00'));
        });

        const request = {
          body: {
            hasDelegated: true,
            originalDetectIntentRequest: {
              payload: {
                conversationId: 25
              }
            },
            queryResult: {
              action: "input.transfer.inbound",
              parameters: {},
              outputContexts: [],
            },
            session: "projects/test-1234/agent/sessions/2b045723-fe5e-6e19-f71f-2e452a29582d",
            provider: "letstalk_agent",
          }
        }

        it('sends the correct message', async () => {
          expect.assertions(1);
          await handlers.handleRequest(request, settings);
          jest.runAllTimers();
          const sentMessage = mockGot.mock.calls[0][1].body.content;
          const expectedMessageText = "Tu conversación está siendo derivada con uno de nuestros ejecutivos.";
          expect(sentMessage).toEqual(expectedMessageText);
        });

        it('adds the correct project_tag', async () => {
          expect.assertions(1);
          await handlers.handleRequest(request, settings);
          jest.runAllTimers();
          const addedProjects = mockGot.mock.calls[1][1].body.project_list;
          expect(addedProjects).toEqual(['Inbound-sitio-publico']);
        });

        it('transfers to the correct group', async () => {
          expect.assertions(1);
          await handlers.handleRequest(request, settings);
          jest.runAllTimers();
          const calledUrl = mockGot.mock.calls[2][0];
          const usedGroup = helpers.groupIdFromUrl(calledUrl);
          expect(usedGroup).toEqual(2455);
        });
      });
    });

    describe("custom integration - payment code", () => {
      const request = {
        body: {
          hasDelegated: true,
          originalDetectIntentRequest: {
            payload: {
              conversationId: 25
            }
          },
          queryResult: {
            action: "input.custom.paymentcode",
            parameters: {
              rut: "11.111.111-k",
            },
            outputContexts: [],
          },
          session: "projects/test-1234/agent/sessions/2b045723-fe5e-6e19-f71f-2e452a29582d",
          provider: "letstalk_agent",
        }
      };

      const paymentCode = {
        permalink: "link1",
        ordenTotal: 1000,
        ordenCodigo: 1234,
        fechaLimite: "9999-10-10",
        campanna: "campaign1",
      };
      describe("when there is one valid payment code", () => {
        beforeEach(() => {
            advanceTo(new Date('June 17, 2020 15:01:00-04:00'));
            paymentCode.ordenEstadoNombre = "Creada";
            mockGot.mockImplementationOnce(() => {
              return new Promise((res) => {res(
                  {
                    body: [paymentCode],
                    statusCode: 200,
                  })})
            })
            .mockImplementation(() => {
              return new Promise((res) => {res({body: JSON.stringify("ok")})})
            });
          });

          it('calls the Integrator', async () => {
            expect.assertions(1);
            await handlers.handleRequest(request, settings);
            jest.runAllTimers();
            const integratorUrl = mockGot.mock.calls[0][0];
            const expectedUrl = "http://base.com?auth_token=abc123&organization=org1&integration=payment_code&rut=11111111-K";
            expect(integratorUrl).toEqual(expectedUrl);
          });

        it('sends the success message', async () => {
          const expectedMessage = "Su código de pago es el **1234** por un monto de **$1000** el cual puede cancelar haciendo [click aqui](link1). Vigente hasta **9999-10-10**. \n\n ¿te puedo ayudar con algo más?";
          expect.assertions(1);
          await handlers.handleRequest(request, settings);
          jest.runAllTimers();
          const sentMessage = mockGot.mock.calls[1][1].body.queryResult.fulfillmentText;
          expect(sentMessage).toEqual(expectedMessage);
        });

        it('sends the message to adaptorex', async () => {
          expect.assertions(1);
          await handlers.handleRequest(request, settings);
          jest.runAllTimers();
          const usedUrl = mockGot.mock.calls[1][0];
          expect(usedUrl).toEqual("https://adaptorex.letsta.lk/dialogflow?token=arex123==");
        });
      });

      describe("when there is no valid payment code", () => {
        describe("when in office hour", () => {
          beforeEach(() => {
            advanceTo(new Date('June 17, 2020 15:01:00-04:00'));
            paymentCode.ordenEstadoNombre = "excluded";
            mockGot.mockImplementationOnce(() => {
              return new Promise((res) => {res(
                  {
                    body: JSON.stringify([paymentCode]),
                    statusCode: 200,
                  })})
            })
            .mockImplementation(() => {
              return new Promise((res) => {res({body: JSON.stringify("ok")})})
            });
          });

          it('sends the correct message', async () => {
            expect.assertions(1);
            await handlers.handleRequest(request, settings);
            jest.runAllTimers();
            const sentMessage = mockGot.mock.calls[1][1].body.content;
            const expectedMessageText = "Te derivamos para hablar sobre tus codigos.";
            expect(sentMessage).toEqual(expectedMessageText);
          });

          it('adds the correct project_tag', async () => {
            expect.assertions(1);
            await handlers.handleRequest(request, settings);
            jest.runAllTimers();
            const addedProjects = mockGot.mock.calls[2][1].body.project_list;
            expect(addedProjects).toEqual(['paymentCodeTag']);
          });

          it("calls CPF transfer", async () => {
            expect.assertions(1);
            await handlers.handleRequest(request, settings);
            jest.runAllTimers();
            const calledUrl = mockGot.mock.calls[3][0];
            const usedGroup = helpers.groupIdFromUrl(calledUrl);
            expect(usedGroup).toEqual(2455);
          });
        });

        describe("when out of office hour", () => {
          beforeEach(() => {
            advanceTo(new Date('June 17, 2020 23:01:00-04:00'));
            paymentCode.ordenEstadoNombre = "excluded";
            mockGot.mockImplementationOnce(() => {
              return new Promise((res) => {res(
                  {
                    body: JSON.stringify([paymentCode]),
                    statusCode: 200,
                  })})
            })
            .mockImplementation(() => {
              return new Promise((res) => {res({body: JSON.stringify("ok")})})
            });
          });

          it('sends the correct message', async () => {
            expectedUrl = "";
            expectedOptions = {};
            expect.assertions(1);
            await handlers.handleRequest(request, settings);
            jest.runAllTimers();
            const sentMessage = mockGot.mock.calls[2][1].body.content;
            const expectedMessageText = "Hablamos otro día.\n\n ¿Le puedo ayudar con algo más?";
            expect(sentMessage).toEqual(expectedMessageText);
          });

            it("calls got three times", async () => {
              expect.assertions(1);
              await handlers.handleRequest(request, settings);
              jest.runAllTimers();
              expect(mockGot).toHaveBeenCalledTimes(3);
            });

          it('adds the correct tag to the conversation', async () => {
              const expectedOptions = {
                url: "https://org1.letsta.lk/api/v1/tags",
                payload: {
                  method: 'POST',
                  headers: {
                    Authorization: 'Basic abc123=='
                  },
                  body: {
                    conversation_id: 25,
                    tag_list: ["BOT_CODIGOPAGO_NO_DERIVA_FH"],
                  },
                  json: true,
                }
              }
              expect.assertions(1);
              await handlers.handleRequest(request, settings);
              jest.runAllTimers();
              expect(mockGot).toHaveBeenNthCalledWith(
                2,
                expectedOptions.url,
                expectedOptions.payload,
              );
            })
        });
      });
    });
  });
});
