const { advanceTo, clear } = require('jest-date-mock');
const handlers = require('../../../../src/handlers');
const df_service = require("./../../../../src/services/dialogflow");
const constants = require("../../../../src/constants");
const settings = require('../../../mocks/configurations/whatsappBot.json');

const mockSetContext = jest.spyOn(df_service, "setContext").mockImplementation();

const mockGot = jest.fn();
jest.mock('got', () => jest.fn((...args) => mockGot(...args)));


jest.useFakeTimers();

describe('WhatsappBot', () => {

  beforeEach(() => {
    clear();
    mockGot.mockClear();
    mockSetContext.mockClear();

    mockGot.mockImplementation(
      () => new Promise((resolve) => resolve({ body: "ok" })));
    clear();
  })

  describe('actions', () => {
    describe('input.transfer.laboratorio', () => {

      const request = {
        body: {
          hasDelegated: true,
          originalDetectIntentRequest: {
            payload: {
                metadata: {
                    provider: constants.providers.twilio,
                    from: "from",
                    to: "to",
                    topic: "topicA",
                }
              }
          },
          queryResult: {
            action: "input.transfer.laboratorio",
            parameters: {}
          },
          session: "projects/test-1234/agent/sessions/2b045723-fe5e-6e19-f71f-2e452a29582d",
        }
      }

      describe('When Fridays before 15:00', () => {
        beforeEach(() => {
          advanceTo(new Date('June 19, 2020 14:59:00-04:00'));
        });

        it('sends the correct message as system message', async () => {
            const expectedUrl = "https://adaptorex.letsta.lk/system?token=arex_123==";
            const expectedPayload = {
              method: 'POST',
              body: {
                  content: "Tu conversación está siendo derivada con uno de nuestros ejecutivos.",
                  topic: "topicA",
              },
              json: true,
            }
            expect.assertions(1);
            await handlers.handleRequest(request, settings);
            jest.runAllTimers();
            expect(mockGot).toHaveBeenNthCalledWith(1, expectedUrl, expectedPayload);
          });

        it('Removes correct chat member', async () => {
            const expectedUrl = "https://adaptorex.letsta.lk/api/v1/members?token=arex_123==";
            const expectedPayload = {
              method: 'DELETE',
              body: {
                  provider: "dialogflow",
                  reference: "2b045723-fe5e-6e19-f71f-2e452a29582d",
                  topic: "topicA",
              },
              json: true
          };
            expect.assertions(1);
            await handlers.handleRequest(request, settings);
            jest.runAllTimers();
            expect(mockGot).toHaveBeenNthCalledWith(3, expectedUrl, expectedPayload);
          });

          it('Adds correct chat member', async () => {
              const expectedUrl = "https://adaptorex.letsta.lk/api/v1/members?token=arex_123==";
              const expectedPayload = {
                  method: 'POST',
                  body: {
                      topic: "topicA",
                      provider: "letstalk",
                      auth_payload: {
                          from: {
                              domain: "twilio",
                              sender: "from",
                              recipient: "to"
                          },
                          to: {
                              domain: "letstalk",
                              sender: "to",
                              recipient: "from",
                          }
                      },
                      extra_data: {
                          inquiry_id: 2766
                      }
                  },
                  json: true
              };
              expect.assertions(1);
              await handlers.handleRequest(request, settings);
              jest.runAllTimers();
              expect(mockGot).toHaveBeenNthCalledWith(2, expectedUrl, expectedPayload);
            });
      });

      describe('When Fridays after 15:00', () => {
        beforeEach(() => {
          advanceTo(new Date('June 19, 2020 16:01:00-04:00'));
        });

        it('sends the correct message as system message', async () => {
          const expectedUrl = "https://adaptorex.letsta.lk/system?token=arex_123==";
          const expectedPayload = {
            method: 'POST',
            body: {
                content: "Tu conversación está siendo derivada con uno de nuestros ejecutivos.",
                topic: "topicA",
            },
            json: true,
          }
          expect.assertions(1);
          await handlers.handleRequest(request, settings);
          jest.runAllTimers();
          expect(mockGot).toHaveBeenNthCalledWith(1, expectedUrl, expectedPayload);
        });

        it('Removes correct chat member', async () => {
            const expectedUrl = "https://adaptorex.letsta.lk/api/v1/members?token=arex_123==";
            const expectedPayload = {
              method: 'DELETE',
              body: {
                  provider: "dialogflow",
                  reference: "2b045723-fe5e-6e19-f71f-2e452a29582d",
                  topic: "topicA",
              },
              json: true
          };
            expect.assertions(1);
            await handlers.handleRequest(request, settings);
            jest.runAllTimers();
            expect(mockGot).toHaveBeenNthCalledWith(3, expectedUrl, expectedPayload);
          });

          it('Adds correct chat member', async () => {
              const expectedUrl = "https://adaptorex.letsta.lk/api/v1/members?token=arex_123==";
              const expectedPayload = {
                  method: 'POST',
                  body: {
                      topic: "topicA",
                      provider: "letstalk",
                      auth_payload: {
                          from: {
                              domain: "twilio",
                              sender: "from",
                              recipient: "to"
                          },
                          to: {
                              domain: "letstalk",
                              sender: "to",
                              recipient: "from",
                          }
                      },
                      extra_data: {
                          inquiry_id: 2455
                      }
                  },
                  json: true
              };
              expect.assertions(1);
              await handlers.handleRequest(request, settings);
              jest.runAllTimers();
              expect(mockGot).toHaveBeenNthCalledWith(2, expectedUrl, expectedPayload);
            });
      });

      describe('When Fridays after 17:50', () => {
        beforeEach(() => {
          advanceTo(new Date('June 19, 2020 17:51:00-04:00'));
        });

        it('It adds the out of office hour message', async () => {
          expect.assertions(1);
          await handlers.handleRequest(request, settings);
          jest.runAllTimers();
          const usedMessage = mockGot.mock.calls[1][1].body.queryResult.fulfillmentText;
          expect(usedMessage).toEqual("¿Le puedo ayudar con algo más?");
        });

        it("sets the context", async () => {
          expect.assertions(1);
          await handlers.handleRequest(request, settings);
          jest.runAllTimers();
          expect(mockSetContext).toHaveBeenCalledWith(params, constants.contextNewTopic);
        });
      });
    });

    describe("custom integration - payment code", () => {
      const request = {
        body: {
          hasDelegated: true,
          originalDetectIntentRequest: {
            payload: {
              metadata: {
                  provider: constants.providers.twilio,
                  from: "from",
                  to: "to",
                  topic: "topicA",
              }
            }
          },
          queryResult: {
            action: "input.custom.paymentcode",
            parameters: {
              rut: "11.111.111-k",
            }
          },
          session: "projects/test-1234/agent/sessions/2b045723-fe5e-6e19-f71f-2e452a29582d",
        }
      };

      const paymentCode = {
        permalink: "link1",
        ordenTotal: 1000,
        ordenCodigo: 1234,
        fechaLimite: "9999-10-10",
        campanna: "campaign1",
      };
      describe("when there is one valid payment code", () => {
        beforeEach(() => {
            advanceTo(new Date('June 17, 2020 15:01:00-04:00'));
            paymentCode.ordenEstadoNombre = "Creada";
            mockGot.mockImplementationOnce(() => {
              return new Promise((res) => {res(
                  {
                    body: [paymentCode],
                    statusCode: 200,
                  })})
            })
            .mockImplementation(() => {
              return new Promise((res) => {res({body: JSON.stringify("ok")})})
            });
          });

          it('calls the Integrator', async () => {
            expect.assertions(1);
            await handlers.handleRequest(request, settings);
            jest.runAllTimers();
            const integratorUrl = mockGot.mock.calls[0][0];
            const expectedUrl = "http://base.com?auth_token=abc123&organization=org1&integration=payment_code&rut=11111111-K";
            expect(integratorUrl).toEqual(expectedUrl);
          });

        it("adds the success message to the agent", async () => {
          const expectedMessage = "Su código de pago es el **1234** por un monto de **$1000** el cual puede cancelar haciendo [click aqui](link1). Vigente hasta **9999-10-10**. \n\n ¿te puedo ayudar con algo más?";
          expect.assertions(1);
          await handlers.handleRequest(request, settings);
          jest.runAllTimers();
          const usedMessage = mockGot.mock.calls[1][1].body.queryResult.fulfillmentText;
          expect(usedMessage).toEqual(expectedMessage);
        });
      });

      describe("when there is no valid payment code", () => {
        describe("when in office hour", () => {
          beforeEach(() => {
            advanceTo(new Date('June 17, 2020 15:01:00-04:00'));
            paymentCode.ordenEstadoNombre = "excluded";
            mockGot.mockImplementationOnce(() => {
              return new Promise((res) => {res(
                  {
                    body: JSON.stringify([paymentCode]),
                    statusCode: 200,
                  })})
            })
            .mockImplementation(() => {
              return new Promise((res) => {res({body: JSON.stringify("ok")})})
            });
          });

          it('Removes correct chat member', async () => {
            const expectedUrl = "https://adaptorex.letsta.lk/api/v1/members?token=arex_123==";
            const expectedPayload = {
              method: 'DELETE',
              body: {
                  provider: "dialogflow",
                  reference: "2b045723-fe5e-6e19-f71f-2e452a29582d",
                  topic: "topicA",
              },
              json: true
          };
            expect.assertions(1);
            await handlers.handleRequest(request, settings);
            jest.runAllTimers();
            expect(mockGot).toHaveBeenNthCalledWith(4, expectedUrl, expectedPayload);
          });

          it('Adds correct chat member', async () => {
              const expectedUrl = "https://adaptorex.letsta.lk/api/v1/members?token=arex_123==";
              const expectedPayload = {
                  method: 'POST',
                  body: {
                      topic: "topicA",
                      provider: "letstalk",
                      auth_payload: {
                          from: {
                              domain: "twilio",
                              sender: "from",
                              recipient: "to"
                          },
                          to: {
                              domain: "letstalk",
                              sender: "to",
                              recipient: "from",
                          }
                      },
                      extra_data: {
                          inquiry_id: 1111,
                          metadata: {
                            rut: "11.111.111-k",
                            motivo: "derivacion por codigo"
                          }
                      }
                  },
                  json: true
              };
              expect.assertions(1);
              await handlers.handleRequest(request, settings);
              jest.runAllTimers();
              expect(mockGot).toHaveBeenNthCalledWith(3, expectedUrl, expectedPayload);
            });
        });

        describe("when out of office hour", () => {
          beforeEach(() => {
            advanceTo(new Date('June 17, 2020 23:01:00-04:00'));
            paymentCode.ordenEstadoNombre = "excluded";
            mockGot.mockImplementationOnce(() => {
              return new Promise((res) => {res(
                  {
                    body: JSON.stringify([paymentCode]),
                    statusCode: 200,
                  })})
            })
            .mockImplementation(() => {
              return new Promise((res) => {res({body: JSON.stringify("ok")})})
            });
          });

        it("sets the context", async () => {
              expect.assertions(1);
              await handlers.handleRequest(request, settings);
              jest.runAllTimers();
              expect(mockSetContext).toHaveBeenCalledWith(params, constants.contextNewTopic);
            });

          it('sends the out of office hour message', async () => {
            expect.assertions(1);
            await handlers.handleRequest(request, settings);
            jest.runAllTimers();
            const sentMessage = mockGot.mock.calls[1][1].body.queryResult.fulfillmentText;
            expect(sentMessage).toEqual("Hablamos otro día.\n\n ¿Le puedo ayudar con algo más?");
          });

          it('sends the message to adaptorex', async () => {
            expect.assertions(1);
            await handlers.handleRequest(request, settings);
            jest.runAllTimers();
            const usedUrl = mockGot.mock.calls[1][0];
            expect(usedUrl).toEqual("https://adaptorex.letsta.lk/dialogflow?token=arex_123==");
          });

          it("calls got twice", async () => {
            expect.assertions(1);
            await handlers.handleRequest(request, settings);
            jest.runAllTimers();
            expect(mockGot).toHaveBeenCalledTimes(2);
          });
        });
      });
    });
  });
});
