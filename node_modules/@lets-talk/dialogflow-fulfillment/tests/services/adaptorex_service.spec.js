let arex_service = require("./../../src/services/adaptorex_service");

const mockGot = jest.fn();
jest.mock('got', () => jest.fn((...args) => mockGot(...args)));

const mockLoggerError = jest.fn();
const mockLoggerInfo = jest.fn();

jest.mock("./../../src/helpers/logger", () => {
  return {
    getLogger: jest.fn(() => ({
      info: jest.fn((...args) => mockLoggerInfo(...args)),
      error: jest.fn((...args) => mockLoggerError(...args)),
    })),
  };
});


describe("An AdaptorexService", () => {
    beforeEach(() => {
        mockLoggerInfo.mockClear();
        mockLoggerError.mockClear();
    });

    describe("A delete chat action", () => {
        const params = {
            adaptorex_token: "abc123",
            environment: "production",
            sessionId: "s1",
            topic: "topicA",
        }
        beforeEach(async () => {
            mockGot.mockClear();
            mockGot.mockImplementationOnce(
              () => new Promise((resolve) => resolve({body: "ok"}))
            );
        });

        it("calls got with expected parameters", async () => {
            expect.assertions(1);
            const expectedUrl = "https://adaptorex.letsta.lk/api/v1/chat?token=abc123"
            const expectedOptions = {
                method: 'DELETE',
                body: {
                    topic: "topicA",
                },
                json: true
            };
            await arex_service.AdaptorexService.deleteChat(params);
            expect(mockGot).toHaveBeenCalledWith(
                expectedUrl, expectedOptions
            );
        });
    });

    describe("A delete member action", () => {
        const params = {
            adaptorex_token: "abc123",
            environment: "production",
            sessionId: "s1",
            topic: "topicA",

        }
        beforeEach(async () => {
            mockGot.mockClear();
            mockGot.mockImplementationOnce(
              () => new Promise((resolve) => resolve({body: "ok"}))
            );
        });

        it("calls got with expected parameters", async () => {
            expect.assertions(1);
            const expectedUrl = "https://adaptorex.letsta.lk/api/v1/members?token=abc123"
            const expectedOptions = {
                method: 'DELETE',
                body: {
                    provider: "dialogflow",
                    reference: "s1",
                    topic: "topicA",
                },
                json: true
            };
            await arex_service.AdaptorexService.deleteMember(params);
            expect(mockGot).toHaveBeenCalledWith(
                expectedUrl, expectedOptions
            );
        });
    });

    describe("An add member action", () => {
        const params = {
            adaptorex_token: "abc123",
            environment: "production",
            sessionId: "s1",
            from: "from",
            to: "to",
            inquiry_id: "q1",
            topic: "topicA",
            senderInfo: {"profile_name": "some folk"}
        }
        beforeEach(async () => {
            mockGot.mockClear();
            mockGot.mockImplementationOnce(
              () => new Promise((resolve) => resolve({body: "ok"}))
            );
        });

        it("calls got with expected parameters", async () => {
            expect.assertions(1);
            const expectedUrl = "https://adaptorex.letsta.lk/api/v1/members?token=abc123"
            const expectedOptions = {
                method: 'POST',
                body: {
                    topic: "topicA",
                    provider: "letstalk",
                    auth_payload: {
                        from: {
                            domain: "twilio",
                            sender: "from", // client
                            recipient: "to", // org
                            extra: params.senderInfo
                        },
                        to: {
                            domain: "letstalk",
                            sender: "to", // org
                            recipient: "from" // client
                        }
                    },
                    extra_data: {
                        inquiry_id: "q1"
                    }
                },
                json: true
            };
            await arex_service.AdaptorexService.addMember(params);
            expect(mockGot).toHaveBeenCalledWith(
                expectedUrl, expectedOptions
            );
        });
    });

    describe("An add member action with additional information", () => {
        const params = {
            adaptorex_token: "abc123",
            environment: "production",
            sessionId: "s1",
            from: "from",
            to: "to",
            inquiry_id: "q1",
            topic: "topicA",
            display_details: {
                fixed: {
                    motivo: "motivo A",
                },
                dynamic: ["param1"],
            },
            extra: {
                param1: "123456",
                param2: "irrelevant parameter"
            }
        }
        beforeEach(async () => {
            mockGot.mockClear();
            mockGot.mockImplementationOnce(
              () => new Promise((resolve) => resolve({body: "ok"}))
            );
        });

        it("calls got with expected parameters", async () => {
            expect.assertions(1);
            const expectedUrl = "https://adaptorex.letsta.lk/api/v1/members?token=abc123"
            const expectedOptions = {
                method: 'POST',
                body: {
                    topic: "topicA",
                    provider: "letstalk",
                    auth_payload: {
                        from: {
                            domain: "twilio",
                            sender: "from", // client
                            recipient: "to" // org
                        },
                        to: {
                            domain: "letstalk",
                            sender: "to", // org
                            recipient: "from" // client
                        }
                    },
                    extra_data: {
                        inquiry_id: "q1",
                        metadata: {
                            motivo: "motivo A",
                            param1: "123456",
                        }
                    }
                },
                json: true
            };
            await arex_service.AdaptorexService.addMember(params);
            expect(mockGot).toHaveBeenCalledWith(
                expectedUrl, expectedOptions
            );
        });
    });

    describe("A send message action", () => {
        const message = "Hola a todxs!";
        const params = {
            adaptorex_token: "abc123",
            environment: "production",
            session: "s1",
        }
        beforeEach(async () => {
            mockGot.mockClear();
            mockGot.mockImplementationOnce(
              () => new Promise((resolve) => resolve({body: "ok"}))
            );
        });

        it("calls got with expected parameters", async () => {
            expect.assertions(1);
            const expectedUrl = "https://adaptorex.letsta.lk/dialogflow?token=abc123";
            const expectedOptions = {
                method: 'POST',
                body: {
                    responseId: "",
                    session: "s1",
                    queryResult: {
                        queryText: "",
                        parameters: {},
                        allRequiredParamsPresent: true,
                        fulfillmentText: message,
                        fulfillmentMessages: [
                            {
                                text: {
                                    text: [
                                        message,
                                    ]
                                }
                            }
                        ],
                        outputContexts: [{}],
                        intent: {
                            name: "",
                            displayName: "",
                        },
                        intentDetectionConfidence: 1,
                        diagnosticInfo: {},
                        languageCode: "es",
                    },
                    originalDetectIntentRequest: {}
                },
                json: true,
            };
            await arex_service.AdaptorexService.addMessage(params, message);
            expect(mockGot).toHaveBeenCalledWith(
                expectedUrl, expectedOptions
            );
        });
    });

    describe("A send messages action", () => {
        const messages = [
            "message1", "message2",
        ];
        const params = {
            adaptorex_token: "abc123",
            environment: "production",
            session: "s1",
        }
        beforeEach(async () => {
            mockGot.mockClear();
            mockGot.mockImplementation(
              () => new Promise((resolve) => resolve({body: "ok"}))
            );
        });

        it("calls got twice", async () => {
            expect.assertions(1);
            await arex_service.AdaptorexService.addMessages(params, messages);
            expect(mockGot).toHaveBeenCalledTimes(2);
        });

        it("sends the first message", async () => {
            expect.assertions(1);
            const expectedUrl = "https://adaptorex.letsta.lk/dialogflow?token=abc123";
            const expectedOptions = {
                method: 'POST',
                body: {
                    responseId: "",
                    session: "s1",
                    queryResult: {
                        queryText: "",
                        parameters: {},
                        allRequiredParamsPresent: true,
                        fulfillmentText: "message1",
                        fulfillmentMessages: [
                            {
                                text: {
                                    text: [
                                        "message1",
                                    ]
                                }
                            }
                        ],
                        outputContexts: [{}],
                        intent: {
                            name: "",
                            displayName: "",
                        },
                        intentDetectionConfidence: 1,
                        diagnosticInfo: {},
                        languageCode: "es",
                    },
                    originalDetectIntentRequest: {}
                },
                json: true,
            };
            await arex_service.AdaptorexService.addMessages(params, messages);
            expect(mockGot).toHaveBeenNthCalledWith(
                1, expectedUrl, expectedOptions
            );
        });

        it("sends the second message", async () => {
            expect.assertions(1);
            const expectedUrl = "https://adaptorex.letsta.lk/dialogflow?token=abc123";
            const expectedOptions = {
                method: 'POST',
                body: {
                    responseId: "",
                    session: "s1",
                    queryResult: {
                        queryText: "",
                        parameters: {},
                        allRequiredParamsPresent: true,
                        fulfillmentText: "message2",
                        fulfillmentMessages: [
                            {
                                text: {
                                    text: [
                                        "message2",
                                    ]
                                }
                            }
                        ],
                        outputContexts: [{}],
                        intent: {
                            name: "",
                            displayName: "",
                        },
                        intentDetectionConfidence: 1,
                        diagnosticInfo: {},
                        languageCode: "es",
                    },
                    originalDetectIntentRequest: {}
                },
                json: true,
            };
            await arex_service.AdaptorexService.addMessages(params, messages);
            expect(mockGot).toHaveBeenNthCalledWith(
                2, expectedUrl, expectedOptions
            );
        });
    });

    describe("A send system message action", () => {
        const message = "Hola a todxs!";
        const params = {
            adaptorex_token: "abc123",
            environment: "production",
            topic: "topicA",
        }
        beforeEach(async () => {
            mockGot.mockClear();
            mockGot.mockImplementationOnce(
              () => new Promise((resolve) => resolve({body: "ok"}))
            );
        });

        it("calls got with expected parameters", async () => {
            expect.assertions(1);
            const expectedUrl = "https://adaptorex.letsta.lk/system?token=abc123";
            const expectedOptions = {
                method: 'POST',
                body: {
                    content: message,
                    topic: "topicA",
                },
                json: true,
            };
            await arex_service.AdaptorexService.addSystemMessage(params, message);
            expect(mockGot).toHaveBeenCalledWith(
                expectedUrl, expectedOptions
            );
        });
    });
});