const df_service = require("./../../src/services/dialogflow");
const helper = require("./../../src/services/helper");
const auth = require("./../../src/services/google_auth");

const mockedRequest = jest.fn();
jest.spyOn(auth, "getJWTClient").mockImplementation(
    () => {return mockedRequest}
)
const mockedAPICall = jest.spyOn(helper, "callDFAPI").mockImplementation(
    () => Promise.resolve()
);

describe("setContext", () => {
    beforeEach(() => {
        mockedRequest.mockClear();
        mockedAPICall.mockClear();
    });

    const context = {
        name: "test-context",
        lifespan: 3,
        parameters: {
            key1: "val1"
        }
    };

    const params = {
        project: "df-project-1",
        sessionId: "abc-123",
    };

    it("calls DF API with correct options", async () => {
        expect.assertions(1);
        const expectedUrl = "https://dialogflow.googleapis.com/v2/projects/df-project-1/agent/environments/draft/users/-/sessions/abc-123/contexts";
        const expectedContext = {
            name: "projects/df-project-1/agent/sessions/abc-123/contexts/test-context",
            lifespanCount: 3,
            parameters: {
                key1: "val1",
            }
        };
        const expectedOptions = {
            url: expectedUrl,
            method: "POST",
            data: expectedContext,
        };
        await df_service.setContext(params, context);
        expect(mockedAPICall).toHaveBeenCalledWith(
            mockedRequest, expectedOptions
        );
    });
});

describe("delete all contexts", () => {
    beforeEach(() => {
        mockedRequest.mockClear();
        mockedAPICall.mockClear();
    });
    const params = {
        project: "df-project-1",
        sessionId: "abc-123",
    };

    it("calls DF API with correct options", async () => {
        expect.assertions(1);
        const expectedUrl = "https://dialogflow.googleapis.com/v2/projects/df-project-1/agent/sessions/abc-123/contexts";
        const expectedOptions = {
            url: expectedUrl,
            method: "DELETE",
        };
        await df_service.deleteAllContexts(params);
        expect(mockedAPICall).toHaveBeenCalledWith(
            mockedRequest, expectedOptions
        );
    });
});


describe("trigger event", () => {
    beforeEach(() => {
        mockedRequest.mockClear();
        mockedAPICall.mockClear();
    });
    const params = {
        project: "df-project-1",
        sessionId: "abc-123",
    };
    const event = "test-event";

    it("calls DF API with correct options", async () => {
        expect.assertions(1);
        const expectedUrl = "https://dialogflow.googleapis.com/v2/projects/df-project-1/agent/sessions/abc-123:detectIntent";
        const expectedOptions = {
            url: expectedUrl,
            method: "POST",
            data: {
                queryInput: {
                    event: {
                        name: "test-event",
                        languageCode: "es"
                    }
                }
            }
        };
        await df_service.triggerEvent(params, event);
        expect(mockedAPICall).toHaveBeenCalledWith(
            mockedRequest, expectedOptions
        );
    });
});

describe("getContext", () => {
    beforeEach(() => {
        mockedRequest.mockClear();
        mockedAPICall.mockClear();
    });

    const context = "test-context";
    const params = {
        project: "df-project-1",
        sessionId: "abc-123",
    };

    it("calls DF API with correct options", async () => {
        expect.assertions(1);
        const expectedUrl = "https://dialogflow.googleapis.com/v2/projects/df-project-1/agent/sessions/abc-123/contexts/test-context";
        const expectedOptions = {
            url: expectedUrl,
            method: "GET",
        };
        await df_service.getContext(params, context);
        expect(mockedAPICall).toHaveBeenCalledWith(
            mockedRequest, expectedOptions
        );
    });
});