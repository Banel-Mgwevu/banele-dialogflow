const https = require("https");

const helper = require("./../../src/services/helper");

const mockedWrite = jest.fn();
const mockedEnd = jest.fn();

jest.mock("https", () => {
    return {
        request: jest.fn(() => ({
            write: jest.fn((...args) => mockedWrite(...args)),
            end: jest.fn((...args) => mockedEnd(...args)),
        }))
    }
});

const mockLoggerError = jest.fn();
const mockLoggerInfo = jest.fn();

jest.mock("./../../src/helpers/logger", () => {
  return {
    getLogger: jest.fn(() => ({
      info: jest.fn((...args) => mockLoggerInfo(...args)),
      error: jest.fn((...args) => mockLoggerError(...args)),
    })),
  };
});

describe("sendRequest", () => {
    const requestOptions = {
        url: "https://hostname.com/path/to/endpoint?p1=v1",
        payload: {
            body: {
                key: "value"
            },
            method: "POST",
        }
    };
    const expectedParams = {
        hostname: "hostname.com",
        path: "/path/to/endpoint?p1=v1",
        method: "POST",
        headers: {
            'Content-Type': 'application/json',
        }
    };

    beforeEach(() => {
        https.request.mockClear();
        mockedWrite.mockClear();
        mockedEnd.mockClear();
    })

    it("creates request object with expected parameters", async () => {
        expect.assertions(1);
        helper.sendRequest(requestOptions).then(res => res());
        expect(https.request).toHaveBeenCalledWith(expectedParams);
    });

    it("writes expected data", async () => {
        expect.assertions(1);
        helper.sendRequest(requestOptions).then(res => res());
        expect(mockedWrite).toHaveBeenCalledWith(
            JSON.stringify(requestOptions.payload.body)
        );
    });

    it("sends request", async () => {
        expect.assertions(1);
        helper.sendRequest(requestOptions).then(res => res());
        expect(mockedEnd).toHaveBeenCalledTimes(1);
    });
})


describe("call DF API", () => {
    const mockMakeRequest = jest.fn();
    const mockClient = {
        request: jest.fn((...args) => mockMakeRequest(...args)),
    };

    const request = {
        key1: "val1"
    };
    beforeEach(() => {
        mockMakeRequest.mockClear();
        mockLoggerError.mockClear();
    });

    describe("success case", () => {

        it("clients executes correct request", async () => {
            expect.assertions(1);
            await helper.callDFAPI(mockClient, request);
            expect(mockMakeRequest).toHaveBeenCalledWith(request);
        });

        it("returns response", async () => {
            expect.assertions(1);
            const res = await helper.callDFAPI(mockClient, request);
            expect(res).toEqual(mockMakeRequest.mock.results[0].value);
        })
    });

    describe("error case", () => {
        const err = new Error("fail");
        const mockClient = {
            request: jest.fn(() => Promise.reject(err)),
        };

        it("throws an error", async () => {
            await expect(helper.callDFAPI(mockClient, request))
            .rejects
            .toThrow("Error when performing request to DF API.");
        });

        it("logs error", async () => {
            try {
                await helper.callDFAPI(mockClient, request);
            } catch (error) {
                expect.assertions(1);
                expect(mockLoggerError).toHaveBeenCalledWith(
                    "Error when making request to DF API:",
                    { error: err },
                )
            }
        })
    });
})