let sinacofi_service = require('../../src/services/sinacofi');

const mockGot = jest.fn();
jest.mock('got', () => jest.fn((...args) => mockGot(...args)));

const mockLoggerError = jest.fn();
const mockLoggerInfo = jest.fn();

jest.mock("./../../src/helpers/logger", () => {
  return {
    getLogger: jest.fn(() => ({
      info: jest.fn((...args) => mockLoggerInfo(...args)),
      error: jest.fn((...args) => mockLoggerError(...args)),
    })),
  };
});

const expectedBodyCollectQuestions = `<?xml version="1.0" encoding="utf-8"?>
    <soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
      <soap:Body>
        <Consulta xmlns="http://sinacofi.cl/WebServices">
          <usuario>lt</usuario>
          <claveUsuario>clave123</claveUsuario>
          <rutCliente>111111111</rutCliente>
          <numeroSerie>123123123</numeroSerie>
          <canalInstitucion>001</canalInstitucion>
        </Consulta>
      </soap:Body>
    </soap:Envelope>`;

const expectedBodyCheckIdentity = `<?xml version=\"1.0\" encoding=\"utf-8\"?>
    <soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">
      <soap:Body>
        <Consulta xmlns=\"http://sinacofi.cl/WebServices\">
          <usuario>lt</usuario>
          <claveUsuario>clave123</claveUsuario>
          <rutCliente>111111111</rutCliente>
          <canalInstitucion>001</canalInstitucion>
          <idChallenge>ch12</idChallenge>
          <desafio>
            <RESPUESTAS>
        <CODIGO_PREGUNTA xmlns=\"http://wsdl.sinacofi.cl/SDN122REQ\">Q1   </CODIGO_PREGUNTA>
        <CODIGO_RESPUESTA xmlns=\"http://wsdl.sinacofi.cl/SDN122REQ\">A1   </CODIGO_RESPUESTA>
      </RESPUESTAS>
<RESPUESTAS>
        <CODIGO_PREGUNTA xmlns=\"http://wsdl.sinacofi.cl/SDN122REQ\">Q2   </CODIGO_PREGUNTA>
        <CODIGO_RESPUESTA xmlns=\"http://wsdl.sinacofi.cl/SDN122REQ\">A2   </CODIGO_RESPUESTA>
      </RESPUESTAS>
          </desafio>
        </Consulta>
      </soap:Body>
    </soap:Envelope>`


describe("SINACOFI Service", () => {
    beforeEach(() => {
        mockLoggerInfo.mockClear();
        mockLoggerError.mockClear();
        mockGot.mockClear();
    });

    describe("collect questions", () => {
        const params = {
            sinacofi_url: "soap-server.soap",
            sinacofi_user: "lt",
            sinacofi_password: "clave123",
            sinacofi_canal: "001",
            headers: {
                host: "www.sinacofi.cl",
                "Content-Type": "text/xml",
                SOAPAction: "http://sinacofi.cl/WebServices/Consulta",
            },
            contexts: [
                {
                    name: "...",
                    parameters: {
                        "rut.original": "11111111-1"
                    }
                },
                {
                    name: "...",
                    parameters: {
                        "serie.original": "123.123.123",
                    }
                },
            ]
        };

        mockGot.mockImplementationOnce(
            () => new Promise((resolve) => resolve({body: "ok"}))
          );

        it("calls got with expected http settings", async () => {
            expect.assertions(1);
            const expectedOptions = {
                body: expectedBodyCollectQuestions,
                method: "POST",
                headers: {
                    "host": "www.sinacofi.cl",
                    "Content-Type": "text/xml",
                    "SOAPAction": "http://sinacofi.cl/WebServices/Consulta",
                },
            };
            const expectedUrl = "soap-server.soap";
            await sinacofi_service.collectQuestions(params);
            expect(mockGot).toHaveBeenCalledWith(expectedUrl, expectedOptions);
        });
    });

    describe("check identity", () => {
        const params = {
            sinacofi_url: "soap-server.soap",
            sinacofi_user: "lt",
            sinacofi_password: "clave123",
            sinacofi_canal: "001",
            headers: {
                host: "www.sinacofi.cl",
                "Content-Type": "text/xml",
                SOAPAction: "http://sinacofi.cl/WebServices/Consulta",
            },
            contexts: [
                {
                    name: "...",
                    parameters: {
                        "rut.original": "11111111-1"
                    }
                },
                {
                    name: "123/question1",
                    parameters: {
                        "codeQuestion": "Q1   ",
                    }
                },
                {
                    name: "123/question2",
                    parameters: {
                        "codeQuestion": "Q2   ",
                    }
                },
                {
                    name: "123/answer1",
                    parameters: {
                        "codeAnswer": "A1   ",
                    }
                },
                {
                    name: "123/answer2",
                    parameters: {
                        "codeAnswer": "A2   ",
                    }
                },
                {
                    name: "challengeId",
                    parameters: {
                        "challengeId": "ch12",
                    },
                }
            ]
        };

        mockGot.mockImplementationOnce(
            () => new Promise((resolve) => resolve({body: "ok"}))
          );

        it("calls got with expected http settings", async () => {
            expect.assertions(1);
            const expectedOptions = {
                body: expectedBodyCheckIdentity,
                method: "POST",
                headers: {
                    "host": "www.sinacofi.cl",
                    "Content-Type": "text/xml",
                    "SOAPAction": "http://sinacofi.cl/WebServices/Consulta",
                },
            };
            const expectedUrl = "soap-server.soap";
            await sinacofi_service.checkAnswers(params);
            expect(mockGot).toHaveBeenCalledWith(expectedUrl, expectedOptions);
        });
    });
});