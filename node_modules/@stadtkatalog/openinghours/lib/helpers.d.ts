import { DateTime } from "luxon";
import { FoldedSpecialDayRange, IOpeningHours, SpecialDateTimeFrames } from "./types";
export declare const WEEKDAY_KEYS: string[];
/**
 * Helper function to determine if a DateTime is inside the given time frame.
 * @param ldt the DateTime object to check
 * @param startFrame {string} start of the time frame in the format "hh:mm"
 * @param endFrame {string} end of the time frame in the format "hh:mm"
 * @returns {boolean} true, if `ldt` is contained in the time frame; false otherwise
 * @private
 */
export declare function _isInTimeFrame(ldt: DateTime, startFrame: string, endFrame: string): boolean;
/**
 * @private
 */
export declare function _areOverlongTimeFrames(timeFrames?: string[]): boolean;
/**
 * @private
 */
export declare function _getAdditionalStartOfDayTimeFrames(overlongTimeFrames: string[]): string[];
/**
 * @private
 */
export declare function _createRangeBag(reducedTimeRange: number[]): {
    [propName: string]: number[];
};
/**
 * @private
 */
export declare function _equalTimeFrames(a: string[] | undefined, b: string[] | undefined): boolean;
/**
 * @private
 */
export declare function _findSimpleRanges(week: IOpeningHours): number[];
/**
 * @private
 */
export declare function _eliminateEqualRanges(week: IOpeningHours): number[];
/**
 * @private
 */
export declare function _canFoldIntoDayRange(range: number[]): boolean;
/**
 * @private
 */
export declare function _foldSpecialDayRanges(specialDays: SpecialDateTimeFrames[]): FoldedSpecialDayRange[];
/**
 * @private
 */
export declare function _formatTimeFrames(hours: string[], format: string, delimiter: string, placeholder: string): string;
