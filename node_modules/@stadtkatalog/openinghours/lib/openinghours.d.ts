import { FormatOptions, IOpeningHours, RangeTimeSpan } from "./types";
/**
 * Stores opening hours and provides methods to work with them.
 * @see https://docs.stadtkatalog.org/
 */
export declare class OpeningHours {
    #private;
    get timezone(): string;
    get specialDays(): IOpeningHours;
    get holidays(): string[];
    get hours(): IOpeningHours;
    /**
     * Creates a new instance with the given opening hours in the specified time zone.
     * @param hours contains the opening hours for each day. If a weekday key is not defined, the opening
     *        hours on this particular day are unknown. If a weekday key references an empty array `[]`,
     *        the entity is closed on this day. In all other cases a weekday key references an array
     *        with multiple time frames in the format `["hh:mm", "hh:mm", ...]`.
     *        Special days must be in the form `YYYY-MM-DD`
     * @param timezone the time zone of the entity
     * @param holidays=[] set of holidays in the format `YYYY-MM-DD`
     */
    constructor(hours: IOpeningHours, timezone: string, holidays?: string[]);
    /**
     * Returns the shorthand name for the given weekday.
     * @param weekday 1 is Monday and 7 is Sunday
     * @returns {string} three letter weekday key
     */
    static weekdayToWeekdayKey(weekday: number): "mon" | "tue" | "wed" | "thu" | "fri" | "sat" | "sun";
    /**
     * Checks if the given date string is on a day with special opening hours.
     * @param dateStr the date in the format `YYYY-MM-DD`
     * @returns {boolean} `true` if holiday, `false` otherwise
     */
    isSpecialDay(dateStr: string): boolean;
    /**
     * Checks if the given date string is on a holiday for the `IOpeningHours` instance.
     * @param dateStr the date in the format `YYYY-MM-DD`
     * @returns {boolean} `true` if holiday, `false` otherwise
     */
    isHoliday(dateStr: string): boolean;
    /**
     * Checks if the preceding day is overlong and returns the weekday key of this overlong day.
     * An overlong day ends after 23:59 hours and continues into the following one,
     * e.g. if the business hours are on Friday from 10:00 - 04:00; or in a 24/7 shop from 00:00 - 24:00.
     * @param date JavaScript date
     * @returns {string} the preceding three-letter weekday key; or `null` if no overlong preceding day found
     */
    getOverlongPrecedingWeekdayKey(date: Date): "mon" | "tue" | "wed" | "thu" | "fri" | "sat" | "sun" | "hol" | null;
    /**
     * Returns true if the opening hours represented by the instance are unknown.
     */
    isUnknown(): boolean;
    /**
     * Checks if the instance is open at the given date.
     * @param date {Object} JavaScript Date instance
     * @returns {boolean} true if the instance is open, false otherwise
     */
    isOpenAt(date: Date): boolean;
    /**
     * Reduces the opening hours into an array of so-called `RangeTimeSpan` elements.
     * All elements in the array are in the most compact form possible. Consecutive matching time ranges will be merged
     * into a single elements with a day range as weekday string.
     *
     * @param formatOptions formatting options.
     * @see https://moment.github.io/luxon/docs/manual/intl.html
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat
     */
    reduce(formatOptions?: FormatOptions): RangeTimeSpan[];
    /**
     * Folds the opening hours into a human readable string.
     *
     * @param formatOptions formatting options.
     * @param separator the string to separate adjacent range timespans.
     * @see https://moment.github.io/luxon/docs/manual/intl.html
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat
     */
    fold(formatOptions?: FormatOptions, separator?: string): string;
}
